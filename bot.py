import os
import logging
import random
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pytz

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_GROUP_ID = int(os.environ.get('ADMIN_GROUP_ID', -4843909295))
USER_CHAT_ID = int(os.environ.get('USER_CHAT_ID', -1003088023508))
BUDAPEST_TZ = pytz.timezone('Europe/Budapest')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(REG_INSTAGRAM, REG_THREADS, REG_GENDER, REG_AGE,
 ADD_USDT, CREATE_TASK_TYPE, CREATE_TASK_LINKS,
 CREATE_TASK_COMMENT, EDIT_MYCOM, MYCOM_POSTS,
 MYCOM_COMMENTS, RAID_DESCRIPTION) = range(12)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PostgreSQL)
users_db: Dict = {}
tasks_db: List = []
frozen_tasks: Dict = {}
admin_tasks: List = []
mycom_contest: Dict = {
    'active': False,
    'registration': False,
    'participants': {},
    'start_time': None,
    'duration': 120
}
mycom_participants = {}
mycom_banned = []
mycom_history = []

raid_data: Dict = {
    'status': 'inactive',
    'description': '',
    'participants': [],
    'start_time': None,
    'duration': 0,
    'winners_history': []
}

# –ö–≤–µ—Å—Ç—ã –¥–ª—è daily (50 –∑–∞–¥–∞–Ω–∏–π)
DAILY_QUESTS = [
    "–ü–æ—Å—Ç–∞–≤—å –ª–∞–π–∫ –Ω–∞ 3 –ø–æ—Å—Ç–∞ –≤ Instagram",
    "–ù–∞–ø–∏—à–∏ 2 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏",
    "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ 1 –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç",
    "–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –≤ Instagram",
    "–°–æ—Ö—Ä–∞–Ω–∏ 5 –ø–æ—Å—Ç–æ–≤ –≤ –∑–∞–∫–ª–∞–¥–∫–∏",
    "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏ 10 —Å—Ç–æ—Ä–∏—Å",
    "–û—Ç–º–µ—Ç—å –¥—Ä—É–≥–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
    "–ò—Å–ø–æ–ª—å–∑—É–π 3 —Ö—ç—à—Ç–µ–≥–∞ –≤ –ø–æ—Å—Ç–µ",
    "–û—Ç–≤–µ—Ç—å –Ω–∞ 2 —Å—Ç–æ—Ä–∏—Å",
    "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ 3 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º",
    "–î–æ–±–∞–≤—å –ø–æ—Å—Ç –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∏–ª—å—Ç—Ä –≤ —Å—Ç–æ—Ä–∏—Å",
    "–û—Ç–º–µ—Ç—å –ª–æ–∫–∞—Ü–∏—é –≤ –ø–æ—Å—Ç–µ",
    "–°–¥–µ–ª–∞–π —Ä–µ–ø–æ—Å—Ç –≤ —Å—Ç–æ—Ä–∏—Å",
    "–û—Ç–≤–µ—Ç—å –Ω–∞ 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ —Å–≤–æ–∏–º –ø–æ—Å—Ç–æ–º",
    "–ò—Å–ø–æ–ª—å–∑—É–π –æ–ø—Ä–æ—Å –≤ —Å—Ç–æ—Ä–∏—Å",
    "–î–æ–±–∞–≤—å –º—É–∑—ã–∫—É –≤ —Å—Ç–æ—Ä–∏—Å",
    "–ü–æ—Å—Ç–∞–≤—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ 5 —Å—Ç–æ—Ä–∏—Å",
    "–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º",
    "–ü–æ–¥–¥–µ—Ä–∂–∏ –º–∞–ª—ã–π –±–∏–∑–Ω–µ—Å –ª–∞–π–∫–æ–º",
    "–ù–∞–π–¥–∏ –Ω–æ–≤—ã–π —Ç—Ä–µ–Ω–¥ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ",
    "–°–¥–µ–ª–∞–π –±—É–º–µ—Ä–∞–Ω–≥ —Å—Ç–æ—Ä–∏—Å",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–∫–µ—Ä —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º",
    "–û—Ç–º–µ—Ç—å –±—Ä–µ–Ω–¥ –≤ –ø–æ—Å—Ç–µ",
    "–ù–∞–ø–∏—à–∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
    "–ü–æ–¥–µ–ª–∏—Å—å —Ä–µ—Ü–µ–ø—Ç–æ–º –≤ —Å—Ç–æ—Ä–∏—Å",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–∫–µ—Ä —Å –≤–æ–ø—Ä–æ—Å–æ–º",
    "–°–¥–µ–ª–∞–π –∫–∞—Ä—É—Å–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç",
    "–î–æ–±–∞–≤—å GIF –≤ —Å—Ç–æ—Ä–∏—Å",
    "–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å —ç–º–æ–¥–∑–∏",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–∫–µ—Ä —Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–π",
    "–ü–æ—Å—Ç–∞–≤—å –ª–∞–π–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—É",
    "–ù–∞–π–¥–∏ –∏ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–∏–∫—Ä–æ–±–ª–æ–≥–µ—Ä–∞",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–∞–π–¥–µ—Ä —Å—Ç–∏–∫–µ—Ä",
    "–ù–∞–ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (50+ —Å–ª–æ–≤)",
    "–°–¥–µ–ª–∞–π –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—é –≤ —Å—Ç–æ—Ä–∏—Å",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–π–º–µ—Ä –≤ —Ä–∏–ª—Å",
    "–î–æ–±–∞–≤—å —Å—É–±—Ç–∏—Ç—Ä—ã –∫ —Ä–∏–ª—Å",
    "–ü–æ—Å—Ç–∞–≤—å –ª–∞–π–∫ –Ω–∞ —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç (–≥–æ–¥+)",
    "–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π –ø–æ—Å—Ç",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–∫–µ—Ä —Å –¥–æ–Ω–∞—Ç–∞–º–∏",
    "–°–¥–µ–ª–∞–π –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫—É –≤ –ø–æ—Å—Ç–µ",
    "–ü–æ–¥–¥–µ—Ä–∂–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ç—Ä–µ–Ω–¥-–∞—É–¥–∏–æ –≤ —Ä–∏–ª—Å",
    "–ù–∞–ø–∏—à–∏ —Å–æ–≤–µ—Ç –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
    "–ü–æ–¥–µ–ª–∏—Å—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–∫–µ—Ä —Å —Å—Å—ã–ª–∫–æ–π",
    "–°–¥–µ–ª–∞–π –∑–∞–∫—É–ª–∏—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
    "–û—Ç–º–µ—Ç—å –¥–æ/–ø–æ—Å–ª–µ",
    "–ü–æ–¥–¥–µ—Ä–∂–∏ –º–µ—Å—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å"
]


def get_user_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton("üßä Pool", callback_data="pool"),
         InlineKeyboardButton("ü™É Trixiki", callback_data="trixiki")],
        [InlineKeyboardButton("‚ù§Ô∏è Like/Comment/Follow", callback_data="actions")],
        [InlineKeyboardButton("üåÄ Profile", callback_data="profile")]
    ]
    return InlineKeyboardMarkup(keyboard)


def generate_user_number(gender: str) -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    while True:
        if gender.upper() == '–ñ':
            number = random.randrange(1, 10000, 2)
        else:
            number = random.randrange(2, 10000, 2)
        
        if not any(u.get('number') == number for u in users_db.values()):
            return number


async def reset_daily_tasks(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –≤ 20:00"""
    budapest_time = datetime.now(BUDAPEST_TZ)
    logger.info(f"Daily reset at {budapest_time}")
    
    tasks_db.clear()
    for user_id, user_data in users_db.items():
        user_data['daily_claimed'] = False
        user_data['trixiki'] = 0
    
    for user_id in users_db.keys():
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üåô –ù–æ–≤—ã–π –¥–µ–Ω—å! –¢—Ä–∏–∫—Å–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π /daily!"
            )
        except Exception as e:
            logger.error(f"Error notifying user {user_id}: {e}")


# ============== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==============

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = update.effective_user.id
    
    if user_id in users_db:
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {update.effective_user.first_name}! üéâ",
            reply_markup=get_user_keyboard()
        )
    else:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trixiki Bot!\n\n"
            "–ë–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ Instagram/Threads.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /reg –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )


async def reg_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    if user_id in users_db:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Instagram –∞–∫–∫–∞—É–Ω—Ç (@username):"
    )
    return REG_INSTAGRAM


async def reg_instagram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['instagram'] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Threads –∞–∫–∫–∞—É–Ω—Ç:")
    return REG_THREADS


async def reg_threads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['threads'] = update.message.text.strip()
    
    keyboard = [
        [InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_m"),
         InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_f")]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return REG_GENDER


async def reg_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    gender = '–ú' if query.data == 'gender_m' else '–ñ'
    context.user_data['gender'] = gender
    
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return REG_AGE


async def reg_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text.strip())
        if age < 13 or age > 100:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return REG_AGE
        
        user_id = update.effective_user.id
        user_number = generate_user_number(context.user_data['gender'])
        
        users_db[user_id] = {
            'number': user_number,
            'username': update.effective_user.username,
            'instagram': context.user_data['instagram'],
            'threads': context.user_data['threads'],
            'gender': context.user_data['gender'],
            'age': age,
            'trixiki': 15,
            'max_limit': 15,
            'daily_claimed': False,
            'usdt_address': None,
            'subscribed': False,
            'banned': False,
            'can_create_tasks': True,
            'stats': {
                'likes_given': 0,
                'likes_received': 0,
                'comments_given': 0,
                'comments_received': 0,
                'follows_given': 0,
                'follows_received': 0
            },
            'achievements': [],
            'created_at': datetime.now(BUDAPEST_TZ).isoformat(),
            'last_interaction': {}
        }
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üÜî –í–∞—à –Ω–æ–º–µ—Ä: {user_number}\n"
            f"üì∏ Instagram: {context.user_data['instagram']}\n"
            f"üßµ Threads: {context.user_data['threads']}\n"
            f"ü™É –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: 15 —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞!",
            reply_markup=get_user_keyboard()
        )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):")
        return REG_AGE


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_user_keyboard())
    return ConversationHandler.END


async def daily_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –∏ –∫–≤–µ—Å—Ç"""
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    user = users_db[user_id]
    
    if user['daily_claimed']:
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å! ‚è∞")
        return
    
    base_bonus = random.randint(3, 9)
    quest = random.choice(DAILY_QUESTS)
    quest_reward = user['max_limit']
    
    keyboard = [[InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –∫–≤–µ—Å—Ç", callback_data="daily_quest_done")]]
    
    await update.message.reply_text(
        f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +{base_bonus} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤!\n\n"
        f"üìã –í–∞—à –∫–≤–µ—Å—Ç –¥–Ω—è:\n{quest}\n\n"
        f"üéØ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–≤–µ—Å—Ç: {quest_reward} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    user['trixiki'] = min(user['trixiki'] + base_bonus, user['max_limit'])
    user['daily_claimed'] = True


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if query.data == "profile":
        await show_profile(update, context)
    elif query.data == "trixiki":
        await show_trixiki(update, context)
    elif query.data == "pool":
        await show_pool(update, context)
    elif query.data == "actions":
        await show_actions_menu(update, context)
    elif query.data == "daily_quest_done":
        await complete_daily_quest(update, context)


async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query if update.callback_query else None
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        message = "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg"
        if query:
            await query.edit_message_text(message)
        else:
            await update.message.reply_text(message)
        return
    
    user = users_db[user_id]
    stats = user['stats']
    
    profile_text = (
        f"üåÄ –ü–†–û–§–ò–õ–¨\n\n"
        f"üÜî –ù–æ–º–µ—Ä: {user['number']}\n"
        f"üë§ {user['gender']} | {user['age']} –ª–µ—Ç\n"
        f"üì∏ Instagram: {user['instagram']}\n"
        f"üßµ Threads: {user['threads']}\n\n"
        f"ü™É –¢—Ä–∏–∫—Å–∏–∫–∏: {user['trixiki']}/{user['max_limit']}\n\n"
        f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {stats['likes_given']}/{stats['likes_received']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['comments_given']}/{stats['comments_received']}\n"
        f"üë• –ü–æ–¥–ø–∏—Å–æ–∫: {stats['follows_given']}/{stats['follows_received']}\n"
    )
    
    if user['achievements']:
        profile_text += f"\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user['achievements'])}"
    
    if query:
        await query.edit_message_text(profile_text, reply_markup=get_user_keyboard())
    else:
        await update.message.reply_text(profile_text, reply_markup=get_user_keyboard())


async def show_trixiki(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await query.edit_message_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    user = users_db[user_id]
    await query.edit_message_text(
        f"ü™É –í–ê–® –ë–ê–õ–ê–ù–°\n\n"
        f"–¢—Ä–∏–∫—Å–∏–∫–∏: {user['trixiki']}/{user['max_limit']}\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–∏–∫—Å–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π\n"
        f"‚ú® –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞",
        reply_markup=get_user_keyboard()
    )


async def show_pool(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not tasks_db:
        await query.edit_message_text(
            "üßä –ü—É–ª –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç!\n\n–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ‚ù§Ô∏è Like/Comment/Follow",
            reply_markup=get_user_keyboard()
        )
        return
    
    available_tasks = [t for t in tasks_db if t['creator_id'] != user_id][:5]
    
    if not available_tasks:
        await query.edit_message_text(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤–∞—Å.",
            reply_markup=get_user_keyboard()
        )
        return
    
    text = "üßä –î–û–°–¢–£–ü–ù–´–ï –ó–ê–î–ê–ù–ò–Ø:\n\n"
    for idx, task in enumerate(available_tasks, 1):
        creator = users_db.get(task['creator_id'], {})
        text += (
            f"{idx}. {task['type'].upper()} | {task['reward']} ü™É\n"
            f"   –û—Ç: @{creator.get('username', 'unknown')}\n\n"
        )
    
    text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dotask <–Ω–æ–º–µ—Ä> –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    await query.edit_message_text(text, reply_markup=get_user_keyboard())


async def show_actions_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await query.edit_message_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    user = users_db[user_id]
    
    keyboard = [
        [InlineKeyboardButton("‚ù§Ô∏è Like (3ü™É)", callback_data="create_like"),
         InlineKeyboardButton("üí¨ Comment (4ü™É)", callback_data="create_comment")],
        [InlineKeyboardButton("üí¨ Special (10ü™É)", callback_data="create_special"),
         InlineKeyboardButton("üë• Follow (5ü™É)", callback_data="create_follow")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    
    await query.edit_message_text(
        f"‚ù§Ô∏è –°–û–ó–î–ê–¢–¨ –ó–ê–î–ê–ù–ò–ï\n\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['trixiki']} ü™É\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def complete_daily_quest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        return
    
    user = users_db[user_id]
    reward = user['max_limit']
    user['trixiki'] = min(user['trixiki'] + reward, user['max_limit'])
    
    await query.edit_message_text(
        f"‚úÖ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! +{reward} ü™É\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['trixiki']}/{user['max_limit']}"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ –°–ü–†–ê–í–ö–ê TRIXIKI BOT\n\n"
        "üéØ –û–°–ù–û–í–ù–´–ï:\n"
        "/start - –ù–∞—á–∞–ª–æ\n"
        "/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/daily - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n"
        "/profile - –ü—Ä–æ—Ñ–∏–ª—å\n"
        "/trixiki - –ë–∞–ª–∞–Ω—Å\n"
        "/pool - –ó–∞–¥–∞–Ω–∏—è\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
        "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        "/stats [@user] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/top - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n"
        "üéÆ –ò–ì–†–û–í–´–ï:\n"
        "/raid - –†–µ–π–¥—ã\n"
        "/mycom - –ö–æ–Ω–∫—É—Ä—Å\n"
        "/quest - –ö–≤–µ—Å—Ç—ã\n\n"
        "üí∞ –¶–ï–ù–´:\n"
        "‚ù§Ô∏è Like - 3 ü™É\n"
        "üí¨ Comment - 4 ü™É\n"
        "üí¨ Special - 10 ü™É\n"
        "üë• Follow - 5 ü™É\n\n"
        "‚ö†Ô∏è –ü–†–ê–í–ò–õ–ê:\n"
        "‚Ä¢ –ù–µ —É–¥–∞–ª—è—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ = –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç\n"
        "‚Ä¢ /check @user - –∂–∞–ª–æ–±–∞"
    )
    await update.message.reply_text(help_text)


# ============== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ==============

async def admin_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /limit @username 1-50")
        return
    
    username = context.args[0].replace('@', '')
    try:
        new_limit = int(context.args[1])
        if new_limit < 1 or new_limit > 50:
            await update.message.reply_text("–õ–∏–º–∏—Ç: 1-50")
            return
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['max_limit'] = new_limit
            await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç @{username}: {new_limit}")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéâ –í–∞—à –ª–∏–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_limit} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤!"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /balance @username")
        return
    
    username = context.args[0].replace('@', '')
    
    for user_data in users_db.values():
        if user_data.get('username') == username:
            await update.message.reply_text(
                f"üí∞ @{username}: {user_data['trixiki']}/{user_data['max_limit']} ü™É"
            )
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def giftstart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    daily_users = [uid for uid, u in users_db.items() if u.get('daily_claimed')]
    
    if not daily_users:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è")
        return
    
    winners_count = random.randint(1, 3)
    winners = random.sample(daily_users, min(winners_count, len(daily_users)))
    
    result = "üéÅ –ü–û–î–ê–†–ö–ò:\n\n"
    
    for winner_id in winners:
        user = users_db[winner_id]
        user['max_limit'] = min(user['max_limit'] + 1, 50)
        result += f"@{user.get('username', 'unknown')} +1 –∫ –ª–∏–º–∏—Ç—É\n"
        
        try:
            await context.bot.send_message(
                chat_id=winner_id,
                text="üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ª–∏–º–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ +1!"
            )
        except Exception as e:
            logger.error(f"Error: {e}")
    
    await update.message.reply_text(result)


# ============== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==============

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    reg_handler = ConversationHandler(
        entry_points=[CommandHandler('reg', reg_start)],
        states={
            REG_INSTAGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_instagram)],
            REG_THREADS: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_threads)],
            REG_GENDER: [CallbackQueryHandler(reg_gender, pattern='^gender_')],
            REG_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_age)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(reg_handler)
    application.add_handler(CommandHandler('daily', daily_command))
    application.add_handler(CommandHandler('help', help_command))
    
    # Callback handlers
    application.add_handler(CallbackQueryHandler(callback_handler))
    
    # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler('limit', admin_limit))
    application.add_handler(CommandHandler('balance', admin_balance))
    application.add_handler(CommandHandler('giftstart', giftstart_command))
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –≤ 20:00 Budapest
    job_queue = application.job_queue
    budapest_time = datetime.now(BUDAPEST_TZ).replace(hour=20, minute=0, second=0)
    job_queue.run_daily(reset_daily_tasks, time=budapest_time.time())
    
    logger.info("üöÄ Trixiki Bot –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
import os
import logging
import random
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pytz

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_GROUP_ID = -4843909295
USER_CHAT_ID = -1003088023508
BUDAPEST_TZ = pytz.timezone('Europe/Budapest')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(REG_INSTAGRAM, REG_THREADS, REG_GENDER, REG_AGE,
 ADD_USDT, CREATE_TASK_TYPE, CREATE_TASK_LINKS,
 CREATE_TASK_COMMENT, EDIT_MYCOM, MYCOM_POSTS,
 MYCOM_COMMENTS, RAID_DESCRIPTION) = range(12)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PostgreSQL)
users_db: Dict = {}
tasks_db: List = []
frozen_tasks: Dict = {}
admin_tasks: List = []
mycom_contest: Dict = {
    'active': False,
    'registration': False,
    'participants': {},
    'start_time': None,
    'duration': 120
}
raid_data: Dict = {
    'status': 'inactive',  # inactive, processing, active
    'description': '',
    'participants': [],
    'start_time': None,
    'duration': 0
}

# –ö–≤–µ—Å—Ç—ã –¥–ª—è daily
DAILY_QUESTS = [
    "–ü–æ—Å—Ç–∞–≤—å –ª–∞–π–∫ –Ω–∞ 3 –ø–æ—Å—Ç–∞ –≤ Instagram",
    "–ù–∞–ø–∏—à–∏ 2 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏",
    "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ 1 –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç",
    "–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –≤ Instagram",
    "–°–æ—Ö—Ä–∞–Ω–∏ 5 –ø–æ—Å—Ç–æ–≤ –≤ –∑–∞–∫–ª–∞–¥–∫–∏",
    "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏ 10 —Å—Ç–æ—Ä–∏—Å",
    "–û—Ç–º–µ—Ç—å –¥—Ä—É–≥–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
    "–ò—Å–ø–æ–ª—å–∑—É–π 3 —Ö—ç—à—Ç–µ–≥–∞ –≤ –ø–æ—Å—Ç–µ",
    "–û—Ç–≤–µ—Ç—å –Ω–∞ 2 —Å—Ç–æ—Ä–∏—Å",
    "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ 3 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"
    # ... –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ 40 –∫–≤–µ—Å—Ç–æ–≤
]


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton("üßä Pool", callback_data="pool"),
         InlineKeyboardButton("ü™É Trixiki", callback_data="trixiki")],
        [InlineKeyboardButton("‚ù§Ô∏è Like/Comment/Follow", callback_data="actions")],
        [InlineKeyboardButton("üåÄ Profile", callback_data="profile"),
         InlineKeyboardButton("üí¨ Chat", url=f"https://t.me/c/{str(USER_CHAT_ID)[4:]}/1")]
    ]
    return InlineKeyboardMarkup(keyboard)


def generate_user_number(gender: str) -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    while True:
        if gender.upper() == '–ñ':
            number = random.randrange(1, 10000, 2)  # –Ω–µ—á–µ—Ç–Ω—ã–µ
        else:
            number = random.randrange(2, 10000, 2)  # —á–µ—Ç–Ω—ã–µ
        
        if not any(u.get('number') == number for u in users_db.values()):
            return number


async def reset_daily_tasks(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –≤ 20:00 –ø–æ –ë—É–¥–∞–ø–µ—à—Ç—É"""
    budapest_time = datetime.now(BUDAPEST_TZ)
    logger.info(f"Daily reset at {budapest_time}")
    
    # –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∏ —Å–±—Ä–æ—Å —Ç—Ä–∏–∫—Å–∏–∫–æ–≤
    tasks_db.clear()
    for user_id, user_data in users_db.items():
        user_data['daily_claimed'] = False
        user_data['trixiki'] = 0
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in users_db.keys():
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üåô –ù–æ–≤—ã–π –¥–µ–Ω—å –Ω–∞—á–∞–ª—Å—è! –¢—Ä–∏–∫—Å–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.\n"
                     "–ò—Å–ø–æ–ª—å–∑—É–π /daily –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!"
            )
        except Exception as e:
            logger.error(f"Error notifying user {user_id}: {e}")


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = update.effective_user.id
    
    if user_id in users_db:
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {update.effective_user.first_name}! üéâ",
            reply_markup=get_user_keyboard()
        )
    else:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trixiki Bot!\n\n"
            "–≠—Ç–æ –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ Instagram –∏ Threads.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /reg –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )


async def reg_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    if user_id in users_db:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Instagram –∞–∫–∫–∞—É–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username):"
    )
    return REG_INSTAGRAM


async def reg_instagram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Instagram"""
    context.user_data['instagram'] = update.message.text.strip()
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Threads –∞–∫–∫–∞—É–Ω—Ç:")
    return REG_THREADS


async def reg_threads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Threads"""
    context.user_data['threads'] = update.message.text.strip()
    
    keyboard = [
        [InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_m"),
         InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_f")]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return REG_GENDER


async def reg_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    gender = '–ú' if query.data == 'gender_m' else '–ñ'
    context.user_data['gender'] = gender
    
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return REG_AGE


async def reg_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        age = int(update.message.text.strip())
        if age < 13 or age > 100:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return REG_AGE
        
        user_id = update.effective_user.id
        user_number = generate_user_number(context.user_data['gender'])
        
        users_db[user_id] = {
            'number': user_number,
            'username': update.effective_user.username,
            'instagram': context.user_data['instagram'],
            'threads': context.user_data['threads'],
            'gender': context.user_data['gender'],
            'age': age,
            'trixiki': 15,
            'max_limit': 15,
            'daily_claimed': False,
            'usdt_address': None,
            'subscribed': False,
            'banned': False,
            'stats': {
                'likes_given': 0,
                'likes_received': 0,
                'comments_given': 0,
                'comments_received': 0,
                'follows_given': 0,
                'follows_received': 0
            },
            'achievements': [],
            'created_at': datetime.now(BUDAPEST_TZ).isoformat()
        }
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üÜî –í–∞—à –Ω–æ–º–µ—Ä: {user_number}\n"
            f"üì∏ Instagram: {context.user_data['instagram']}\n"
            f"üßµ Threads: {context.user_data['threads']}\n"
            f"ü™É –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: 15 —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /daily –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞!",
            reply_markup=get_user_keyboard()
        )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ):")
        return REG_AGE


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_user_keyboard()
    )
    return ConversationHandler.END


async def daily_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –∏ –∫–≤–µ—Å—Ç"""
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    user = users_db[user_id]
    
    if user['daily_claimed']:
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å! ‚è∞")
        return
    
    # –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å
    base_bonus = random.randint(3, 9)
    
    # –ö–≤–µ—Å—Ç
    quest = random.choice(DAILY_QUESTS)
    quest_reward = user['max_limit']
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –∫–≤–µ—Å—Ç", callback_data="daily_quest_done")]
    ]
    
    await update.message.reply_text(
        f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +{base_bonus} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤!\n\n"
        f"üìã –í–∞—à –∫–≤–µ—Å—Ç –¥–Ω—è:\n{quest}\n\n"
        f"üéØ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–≤–µ—Å—Ç: {quest_reward} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    user['trixiki'] = min(user['trixiki'] + base_bonus, user['max_limit'])
    user['daily_claimed'] = True


async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    user = users_db[user_id]
    stats = user['stats']
    
    profile_text = (
        f"üåÄ –ü–†–û–§–ò–õ–¨\n\n"
        f"üÜî –ù–æ–º–µ—Ä: {user['number']}\n"
        f"üë§ –ü–æ–ª: {user['gender']} | –í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
        f"üì∏ Instagram: {user['instagram']}\n"
        f"üßµ Threads: {user['threads']}\n\n"
        f"ü™É –¢—Ä–∏–∫—Å–∏–∫–∏: {user['trixiki']}/{user['max_limit']}\n\n"
        f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤ –æ—Ç–¥–∞–Ω–æ: {stats['likes_given']}\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {stats['likes_received']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['comments_given']}/{stats['comments_received']}\n"
        f"üë• –ü–æ–¥–ø–∏—Å–æ–∫: {stats['follows_given']}/{stats['follows_received']}\n"
    )
    
    if user['achievements']:
        profile_text += f"\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {len(user['achievements'])}"
    
    await update.message.reply_text(profile_text, reply_markup=get_user_keyboard())


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞"""
    help_text = (
        "üìñ –°–ü–†–ê–í–ö–ê TRIXIKI BOT\n\n"
        "üéØ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:\n"
        "/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/daily - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n"
        "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/trixiki - –ë–∞–ª–∞–Ω—Å\n"
        "/pool - –ó–∞–¥–∞–Ω–∏—è\n\n"
        "‚ù§Ô∏è –î–ï–ô–°–¢–í–ò–Ø:\n"
        "‚Ä¢ Like - 3 —Ç—Ä–∏–∫—Å–∏–∫–∞ (–º–∞–∫—Å 3 –ø–æ—Å—Ç–∞)\n"
        "‚Ä¢ Comment - 4 —Ç—Ä–∏–∫—Å–∏–∫–∞ (–º–∞–∫—Å 2)\n"
        "‚Ä¢ Special Comment - 10 —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n"
        "‚Ä¢ Follow - 5 —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n\n"
        "üìã –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:\n"
        "/stats @username - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/check @username - –ñ–∞–ª–æ–±–∞\n"
        "/top - –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/quest - –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã\n"
        "/raid - –†–µ–π–¥ —Å–∏—Å—Ç–µ–º–∞\n"
        "/mycom - –ö–æ–Ω–∫—É—Ä—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n\n"
        "‚ö†Ô∏è –ü–†–ê–í–ò–õ–ê:\n"
        "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏:\n"
        "- –û—Ç–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "- –£–¥–∞–ª—è—Ç—å –ª–∞–π–∫–∏\n"
        "- –£–¥–∞–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n\n"
        "–§–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è!"
    )
    
    await update.message.reply_text(help_text)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    reg_handler = ConversationHandler(
        entry_points=[CommandHandler('reg', reg_start)],
        states={
            REG_INSTAGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_instagram)],
            REG_THREADS: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_threads)],
            REG_GENDER: [CallbackQueryHandler(reg_gender, pattern='^gender_')],
            REG_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_age)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(reg_handler)
    application.add_handler(CommandHandler('daily', daily_command))
    application.add_handler(CommandHandler('profile', profile_command))
    application.add_handler(CommandHandler('help', help_command))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ (20:00 Budapest)
    job_queue = application.job_queue
    budapest_time = datetime.now(BUDAPEST_TZ).replace(hour=20, minute=0, second=0)
    job_queue.run_daily(reset_daily_tasks, time=budapest_time.time())
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("Bot started!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
