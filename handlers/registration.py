"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from config import BUDAPEST_TZ, START_TRIXIKI, INSTAGRAM_ACCOUNT, THREADS_ACCOUNT
from database import create_user, get_user
from utils import generate_user_number, get_user_keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è
REG_INSTAGRAM, REG_THREADS, REG_GENDER, REG_AGE = range(4)


async def reg_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    
    if get_user(user_id):
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø\n\n"
        "–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Instagram –∞–∫–∫–∞—É–Ω—Ç\n"
        "–§–æ—Ä–º–∞—Ç: @username"
    )
    return REG_INSTAGRAM


async def reg_instagram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Instagram"""
    instagram = update.message.text.strip()
    if not instagram.startswith('@'):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: @username\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return REG_INSTAGRAM
    
    context.user_data['instagram'] = instagram
    await update.message.reply_text(
        "–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Threads –∞–∫–∫–∞—É–Ω—Ç\n"
        "–§–æ—Ä–º–∞—Ç: @username"
    )
    return REG_THREADS


async def reg_threads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ Threads"""
    threads = update.message.text.strip()
    if not threads.startswith('@'):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: @username\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return REG_THREADS
    
    context.user_data['threads'] = threads
    
    keyboard = [
        [InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_m"),
         InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_f")]
    ]
    await update.message.reply_text(
        "–®–∞–≥ 3/4: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return REG_GENDER


async def reg_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    gender = '–ú' if query.data == 'gender_m' else '–ñ'
    context.user_data['gender'] = gender
    
    await query.edit_message_text(
        "–®–∞–≥ 4/4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç\n"
        "–§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ (13-100)"
    )
    return REG_AGE


async def reg_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        age = int(update.message.text.strip())
        if age < 13 or age > 100:
            await update.message.reply_text("‚ùå –í–æ–∑—Ä–∞—Å—Ç: 13-100\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return REG_AGE
        
        user_id = update.effective_user.id
        user_number = generate_user_number(context.user_data['gender'])
        
        user_data = {
            'number': user_number,
            'username': update.effective_user.username,
            'instagram': context.user_data['instagram'],
            'threads': context.user_data['threads'],
            'gender': context.user_data['gender'],
            'age': age,
            'trixiki': START_TRIXIKI,
            'max_limit': START_TRIXIKI,
            'daily_claimed': False,
            'usdt_address': None,
            'subscribed': False,
            'banned': False,
            'can_create_tasks': True,
            'daily_tasks_created': {'likes': 0, 'comments': 0, 'follows': 0},
            'stats': {
                'likes_given': 0,
                'likes_received': 0,
                'comments_given': 0,
                'comments_received': 0,
                'follows_given': 0,
                'follows_received': 0,
                'total_earned': 0
            },
            'achievements': [],
            'created_at': datetime.now(BUDAPEST_TZ).isoformat(),
            'last_interaction': {}
        }
        
        create_user(user_id, user_data)
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üÜî –ù–æ–º–µ—Ä: {user_number}\n"
            f"üë§ {context.user_data['gender']} | {age} –ª–µ—Ç\n"
            f"üì∏ Instagram: {context.user_data['instagram']}\n"
            f"üßµ Threads: {context.user_data['threads']}\n"
            f"ü™É –ë–∞–ª–∞–Ω—Å: {START_TRIXIKI} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n\n"
            f"üî• –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {INSTAGRAM_ACCOUNT} –∏ {THREADS_ACCOUNT}\n"
            f"—á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –¥–æ 20!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /daily –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞!",
            reply_markup=get_user_keyboard()
        )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–≤–æ–∑—Ä–∞—Å—Ç):")
        return REG_AGE


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_user_keyboard())
    context.user_data.clear()
    return ConversationHandler.END
