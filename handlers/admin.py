"""
–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
"""
import random
import logging
from telegram import Update
from telegram.ext import ContextTypes

from config import ADMIN_GROUP_ID
from database import users_db

logger = logging.getLogger(__name__)


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π MyCom
admin_mycom_tasks = {}


async def admin_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /limit"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /limit @username 1-50")
        return
    
    username = context.args[0].replace('@', '')
    try:
        new_limit = int(context.args[1])
        if new_limit < 1 or new_limit > 50:
            await update.message.reply_text("–õ–∏–º–∏—Ç: 1-50")
            return
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['max_limit'] = new_limit
            await update.message.reply_text(f"‚ùï –õ–∏–º–∏—Ç ü™É @{username}: {new_limit}")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üë®üèº‚Äçüíª –í–∞—à max limit ü™É–¢—Ä–∏–∫—Å–∏–∫–æ–≤ —Ç–µ–ø–µ—Ä—å {new_limit}!"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /balance"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /balance @username")
        return
    
    username = context.args[0].replace('@', '')
    
    for user_data in users_db.values():
        if user_data.get('username') == username:
            await update.message.reply_text(
                f"üí• @{username}:\n{user_data['trixiki']}/{user_data['max_limit']} ü™É"
            )
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_trixikichange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /trixikichange"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trixikichange @username —á–∏—Å–ª–æ")
        return
    
    username = context.args[0].replace('@', '')
    try:
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['trixiki'] = min(amount, user_data['max_limit'])
            await update.message.reply_text(f"üè¶ –ë–∞–ª–∞–Ω—Å @{username}: {user_data['trixiki']}")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùï –ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user_data['trixiki']} ü™É"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_trixikiadd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /trixikiadd"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trixikiadd @username —á–∏—Å–ª–æ")
        return
    
    username = context.args[0].replace('@', '')
    try:
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['trixiki'] = min(user_data['trixiki'] + amount, user_data['max_limit'])
            await update.message.reply_text(
                f"‚úÖ @{username} +{amount} ü™É\n–ë–∞–ª–∞–Ω—Å: {user_data['trixiki']}"
            )
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üíù +{amount} ü™É!"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_localgirls(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /localgirls"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    message = ' '.join(context.args)
    if not message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /localgirls <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    count = 0
    for user_id, user_data in users_db.items():
        if user_data.get('gender') == '–ñ':
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message}"
                )
                count += 1
            except Exception as e:
                logger.error(f"Error: {e}")
    
    await update.message.reply_text(f"üì™ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {count} –¥–µ–≤—É—à–∫–∞–º")


async def admin_localboys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /localboys"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    message = ' '.join(context.args)
    if not message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /localboys <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    count = 0
    for user_id, user_data in users_db.items():
        if user_data.get('gender') == '–ú':
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message}"
                )
                count += 1
            except Exception as e:
                logger.error(f"Error: {e}")
    
    await update.message.reply_text(f"üì¨ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {count} –ø–∞—Ä–Ω—è–º")


async def admin_liketimeon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /liketimeon"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /liketimeon @username")
        return
    
    username = context.args[0].replace('@', '')
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['can_create_tasks'] = True
            await update.message.reply_text(f"üü¢ @{username} –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üíö –í–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è!"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_liketimeoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /liketimeoff"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /liketimeoff @username")
        return
    
    username = context.args[0].replace('@', '')
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['can_create_tasks'] = False
            await update.message.reply_text(f"üìõ @{username} –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üìõ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def giftstart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /giftstart"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    daily_users = [uid for uid, u in users_db.items() if u.get('daily_claimed')]
    
    if not daily_users:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    winners_count = random.randint(1, 3)
    winners = random.sample(daily_users, min(winners_count, len(daily_users)))
    
    result = "‚ù§Ô∏è –ù–∞–≥—Ä–∞–¥—ã:\n\n"
    
    for winner_id in winners:
        user = users_db[winner_id]
        user['max_limit'] = min(user['max_limit'] + 1, 50)
        result += f"@{user.get('username', 'unknown')} +1 –ª–∏–º–∏—Ç\n"
        
        try:
            await context.bot.send_message(
                chat_id=winner_id,
                text="‚öôÔ∏è –í–∞—à –ª–∏–º–∏—Ç –¢—Ä–∏–∫—Å–∏–∫–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ +1!"
            )
        except Exception as e:
            logger.error(f"Error: {e}")
    
    await update.message.reply_text(result)


async def mycomadminadd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üîê –°–ö–†–´–¢–ê–Ø –ö–û–ú–ê–ù–î–ê: –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏—è –≤ MyCom"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    admin_id = update.effective_user.id
    
    await update.message.reply_text(
        "üîê –ê–î–ú–ò–ù –ó–ê–î–ê–ù–ò–Ø MYCOM\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç—ã (1-4 —à—Ç—É–∫–∏):\n\n"
        "–§–æ—Ä–º–∞—Ç:\n"
        "–ø–æ—Å—Ç1 https://instagram.com/p/...\n"
        "–ø–æ—Å—Ç2 https://threads.net/...\n"
        "–ø–æ—Å—Ç3 https://instagram.com/p/...\n"
        "–ø–æ—Å—Ç4 https://threads.net/..."
    )
    
    context.user_data['mycom_admin_adding'] = {
        'admin_id': admin_id,
        'posts': [],
        'comments': {},
        'stage': 'posts'
    }


async def handle_mycom_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è MyCom –∑–∞–¥–∞–Ω–∏–π"""
    if 'mycom_admin_adding' not in context.user_data:
        return False
    
    admin_data = context.user_data['mycom_admin_adding']
    text = update.message.text
    
    if admin_data['stage'] == 'posts':
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤
        lines = text.strip().split('\n')
        for line in lines:
            if line.startswith('–ø–æ—Å—Ç'):
                parts = line.split(' ', 1)
                if len(parts) == 2:
                    post_key = parts[0]
                    url = parts[1].strip()
                    admin_data['posts'].append({
                        'key': post_key,
                        'url': url
                    })
                    admin_data['comments'][post_key] = []
        
        if not admin_data['posts']:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return True
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
        admin_data['stage'] = 'comments'
        admin_data['current_post_index'] = 0
        current_post = admin_data['posts'][0]
        
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(admin_data['posts'])} –ø–æ—Å—Ç–æ–≤\n\n"
            f"–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è {current_post['key']}:\n"
            f"(–ö–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)"
        )
        return True
    
    elif admin_data['stage'] == 'comments':
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        current_index = admin_data['current_post_index']
        current_post = admin_data['posts'][current_index]
        comments = text.strip().split('\n')[:3]
        
        admin_data['comments'][current_post['key']] = comments
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å—Ç—É
        admin_data['current_post_index'] += 1
        
        if admin_data['current_post_index'] < len(admin_data['posts']):
            next_post = admin_data['posts'][admin_data['current_post_index']]
            await update.message.reply_text(
                f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è {current_post['key']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n"
                f"–¢–µ–ø–µ—Ä—å 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è {next_post['key']}:"
            )
            return True
        else:
            # –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è
            await save_admin_mycom_tasks(admin_data, update, context)
            context.user_data.clear()
            return True
    
    return False


async def save_admin_mycom_tasks(admin_data, update, context):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ MyCom"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    task_id = f"admin_{int(__import__('time').time())}"
    admin_mycom_tasks[task_id] = {
        'posts': admin_data['posts'],
        'comments': admin_data['comments'],
        'admin_id': admin_data['admin_id']
    }
    
    result = f"‚úÖ –ê–î–ú–ò–ù–°–ö–ò–ï –ó–ê–î–ê–ù–ò–Ø –î–û–ë–ê–í–õ–ï–ù–´\n\n"
    result += f"üìù –ü–æ—Å—Ç–æ–≤: {len(admin_data['posts'])}\n"
    result += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {sum(len(c) for c in admin_data['comments'].values())}\n\n"
    result += "–ó–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º MyCom –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
    
    await update.message.reply_text(result)
    
    logger.info(f"Admin MyCom tasks added: {task_id}")


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handlers/tasks.py
def get_admin_mycom_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è MyCom"""
    return admin_mycom_tasks



async def admin_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /limit"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /limit @username 1-50")
        return
    
    username = context.args[0].replace('@', '')
    try:
        new_limit = int(context.args[1])
        if new_limit < 1 or new_limit > 50:
            await update.message.reply_text("–õ–∏–º–∏—Ç: 1-50")
            return
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['max_limit'] = new_limit
            await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç @{username}: {new_limit}")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéâ –í–∞—à –ª–∏–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_limit}!"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /balance"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /balance @username")
        return
    
    username = context.args[0].replace('@', '')
    
    for user_data in users_db.values():
        if user_data.get('username') == username:
            await update.message.reply_text(
                f"üí∞ @{username}:\n{user_data['trixiki']}/{user_data['max_limit']} ü™É"
            )
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_trixikichange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /trixikichange"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trixikichange @username —á–∏—Å–ª–æ")
        return
    
    username = context.args[0].replace('@', '')
    try:
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['trixiki'] = min(amount, user_data['max_limit'])
            await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å @{username}: {user_data['trixiki']}")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üí∞ –ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user_data['trixiki']} ü™É"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_trixikiadd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /trixikiadd"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trixikiadd @username —á–∏—Å–ª–æ")
        return
    
    username = context.args[0].replace('@', '')
    try:
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['trixiki'] = min(user_data['trixiki'] + amount, user_data['max_limit'])
            await update.message.reply_text(
                f"‚úÖ @{username} +{amount} ü™É\n–ë–∞–ª–∞–Ω—Å: {user_data['trixiki']}"
            )
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéÅ +{amount} ü™É!"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_localgirls(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /localgirls"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    message = ' '.join(context.args)
    if not message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /localgirls <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    count = 0
    for user_id, user_data in users_db.items():
        if user_data.get('gender') == '–ñ':
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message}"
                )
                count += 1
            except Exception as e:
                logger.error(f"Error: {e}")
    
    await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –¥–µ–≤—É—à–∫–∞–º")


async def admin_localboys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /localboys"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    message = ' '.join(context.args)
    if not message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /localboys <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    count = 0
    for user_id, user_data in users_db.items():
        if user_data.get('gender') == '–ú':
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message}"
                )
                count += 1
            except Exception as e:
                logger.error(f"Error: {e}")
    
    await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–∞—Ä–Ω—è–º")


async def admin_liketimeon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /liketimeon"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /liketimeon @username")
        return
    
    username = context.args[0].replace('@', '')
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['can_create_tasks'] = True
            await update.message.reply_text(f"‚úÖ @{username} –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚úÖ –í–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è!"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_liketimeoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /liketimeoff"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /liketimeoff @username")
        return
    
    username = context.args[0].replace('@', '')
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['can_create_tasks'] = False
            await update.message.reply_text(f"‚ùå @{username} –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def giftstart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /giftstart"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    daily_users = [uid for uid, u in users_db.items() if u.get('daily_claimed')]
    
    if not daily_users:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    winners_count = random.randint(1, 3)
    winners = random.sample(daily_users, min(winners_count, len(daily_users)))
    
    result = "üéÅ –ü–û–î–ê–†–ö–ò:\n\n"
    
    for winner_id in winners:
        user = users_db[winner_id]
        user['max_limit'] = min(user['max_limit'] + 1, 50)
        result += f"@{user.get('username', 'unknown')} +1 –ª–∏–º–∏—Ç\n"
        
        try:
            await context.bot.send_message(
                chat_id=winner_id,
                text="üéÅ –í–∞—à –ª–∏–º–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ +1!"
            )
        except Exception as e:
            logger.error(f"Error: {e}")
    
    await update.message.reply_text(result)
