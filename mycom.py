"""
–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω–∫—É—Ä—Å–∞ MyCom –¥–ª—è Trixiki Bot
–ö–æ–Ω–∫—É—Ä—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∂–∏–≤—ã–º–∏ —Ä–∞—É–Ω–¥–∞–º–∏
"""

import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from bot import users_db, mycom_contest, BUDAPEST_TZ, ADMIN_GROUP_ID, USER_CHAT_ID

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–∞
mycom_participants = {}  # user_id: {'posts': [], 'comments': {}, 'score': 0}
mycom_banned = []
mycom_history = []


async def mycom_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–Ω–∫—É—Ä—Å üí®MyCom? –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await update.message.reply_text("üë®üèº‚Äçüíª –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: /reg")
        return
    
    if not mycom_contest['active'] and not mycom_contest['registration']:
        text = (
    "üí® –ö–û–ù–ö–£–†–° MYCOM\n\n"
    "–ß—Ç–æ —ç—Ç–æ‚ùì\n"
    "–≠—Ç–æ –∫–æ–Ω–∫—É—Ä—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≥–¥–µ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫–∏–µ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã, –∫–∞–∫ –Ω—É–∂–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–∏—à–µ—Ç –∫ –Ω–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞.\n"
    "–î—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–µ–ª–∞—é—Ç —Ç–æ –∂–µ —Å–∞–º–æ–µ ‚Äî –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É—é—Ç —Ç–≤–æ–∏ –ø–æ—Å—Ç—ã, –∞ —Ç—ã ‚Äî –∏—Ö.\n\n"
    "‚òëÔ∏è –¶–µ–ª—å ‚Äî —Å–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.\n\n"
    "üîñ –ü—Ä–∞–≤–∏–ª–∞: —Å—Ç–∞–≤–∏–º ‚ù§Ô∏è –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º—ã–π –ø–æ—Å—Ç\n"
    "‚Ä¢ –ü—Ä–∏–≥–æ—Ç–æ–≤—å 2‚Äì4 —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
    "‚Ä¢ –ù–∞–ø–∏—à–∏ —Ç—Ä–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π\n"
    "‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n"
    "‚Ä¢ –í—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Ä—É—á–Ω—É—é ‚Äî —Ä–µ–∞–ª—å–Ω–æ, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.\n\n"
    "‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–∞–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏ = –±–∞–Ω\n\n"
    "üí• –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 —á–∞—Å–∞\n"
    "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω–∞–≥—Ä–∞–¥—ã!\n\n"
    "üî¥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞"
)
    elif mycom_contest['registration']:
        text = (
            "üí® MYCOM\n\n"
            "üìñ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞!\n\n"
            "‚ùï–ö–æ–º–∞–Ω–¥–∞ /mycomjoin –¥–ª—è —É—á–∞—Å—Ç–∏—è!\n"
            f"‚òÑÔ∏è –ù–∞—á–∞–ª–æ: {get_time_left(mycom_contest['start_time'])}"
        )
    else:  # active
        text = (
            "‚ùï –ö–û–ù–ö–£–†–° MYCOM\n\n"
            "üí® MyCom –∞–∫—Ç–∏–≤–µ–Ω!\n\n"
            f"üßë‚Äçüßë‚Äçüßí‚Äçüßí –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(mycom_participants)}\n"
            f"‚åöÔ∏è –û—Å—Ç–∞–ª–æ—Å—å: {get_time_left(mycom_contest.get('end_time'))}\n\n"
            "–ö–æ–º–∞–Ω–¥–∞ /mycomstatus –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
        )
    
    await update.message.reply_text(text)


def get_time_left(target_time):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è"""
    if not target_time:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    now = datetime.now(BUDAPEST_TZ)
    delta = target_time - now
    
    if delta.total_seconds() <= 0:
        return "–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ"
    
    minutes = int(delta.total_seconds() / 60)
    return f"{minutes} –º–∏–Ω"


async def mycom_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üí• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"""
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    if user_id in mycom_banned:
        await update.message.reply_text(
            "üë∫ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–µ MyComüëπ"
        )
        return
    
    if not mycom_contest['registration']:
        await update.message.reply_text(
            "üîí –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞."
        )
        return
    
    if user_id in mycom_participants:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    default_limit = 2
    mycom_participants[user_id] = {
        'posts': [],
        'comments': {},
        'score': 0,
        'post_limit': default_limit,
        'last_action': datetime.now(BUDAPEST_TZ),
        'active': True
    }
    
    await update.message.reply_text(
        f"üü© –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n"
        f"‚õìÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–¥–æ {default_limit}):\n\n"
        f"–§–æ—Ä–º–∞—Ç:\n"
        f"–ø–æ—Å—Ç1 https://instagram.com/p/...\n"
        f"–ø–æ—Å—Ç2 https://threads.net/...\n\n"
        f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /editmycom –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
    )


async def mycom_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    user_id = update.effective_user.id
    
    if user_id not in mycom_participants:
        await update.message.reply_text("ü§∑üèº‚Äç‚ôÇÔ∏è –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!")
        return
    
    participant = mycom_participants[user_id]
    
    text = (
        f"üî• –í–ê–® –ü–†–û–ì–†–ï–°–°\n\n"
        f"‚ñ™Ô∏è –ë–∞–ª–ª–æ–≤: {participant['score']}\n"
        f"‚óΩÔ∏è –ü–æ—Å—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(participant['posts'])}/{participant['post_limit']}\n"
        f"ü™Ñ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {sum(len(c) for c in participant['comments'].values())}\n"
        f"üíö –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if participant['active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
    )
    
    await update.message.reply_text(text)


async def mycom_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–π—Ç–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞"""
    if not mycom_contest['active']:
        await update.message.reply_text("–ö–æ–Ω–∫—É—Ä—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!")
        return
    
    sorted_participants = sorted(
        mycom_participants.items(),
        key=lambda x: x[1]['score'],
        reverse=True
    )[:10]
    
    text = "üèÜ MyCom top users\n\n"
    
    for idx, (user_id, data) in enumerate(sorted_participants, 1):
        user = users_db.get(user_id, {})
        username = user.get('username', 'unknown')
        
        medal = ""
        if idx == 1:
            medal = "ü•á"
        elif idx == 2:
            medal = "ü•à"
        elif idx == 3:
            medal = "ü•â"
        
        text += f"{medal}{idx}. @{username} - {data['score']} –±–∞–ª–ª–æ–≤\n"
    
    await update.message.reply_text(text)


async def edit_mycom(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞"""
    user_id = update.effective_user.id
    
    if user_id not in mycom_participants:
        await update.message.reply_text("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!")
        return
    
    if len(context.args) < 1:
        await update.message.reply_text(
            "–ö–æ–º–∞–Ω–¥–∞: /editmycom –ø–æ—Å—Ç1\n\n"
            "–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ"
        )
        return
    
    post_key = context.args[0]
    participant = mycom_participants[user_id]
    
    if post_key not in [f"–ø–æ—Å—Ç{i+1}" for i in range(len(participant['posts']))]:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞!")
        return
    
    context.user_data['editing_post'] = post_key
    
    await update.message.reply_text(
        f"üñãÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è {post_key}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n\n"
        f"ü§î FAKECom –ü—Ä–∏–º–µ—Ä:\n"
        f"–£ —Ç–µ–±—è –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∫—Ä–∞—Å–∏–≤—ã–µ –≥–ª–∞–∑–∞ ü§©\n"
        f"–§–æ—Ç–∫–∏ —Å—É–ø–µ—Ä, —ç—Ç–æ —Ç—ã –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ?\n"
        f"–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–æ–∑—å–º–∏ –º–µ–Ω—è —Å —Å–æ–±–æ–πüòÑ"
    )


async def handle_mycom_post_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ—Å—Ç—ã"""
    user_id = update.effective_user.id
    
    if user_id not in mycom_participants:
        return
    
    participant = mycom_participants[user_id]
    message_text = update.message.text
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫
    lines = message_text.strip().split('\n')
    
    for line in lines:
        if line.startswith('–ø–æ—Å—Ç'):
            parts = line.split(' ', 1)
            if len(parts) == 2:
                post_num = parts[0]
                url = parts[1].strip()
                
                if len(participant['posts']) < participant['post_limit']:
                    participant['posts'].append({
                        'key': post_num,
                        'url': url
                    })
                    participant['comments'][post_num] = []
    
    await update.message.reply_text(
        f"üåÉ –ü–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {len(participant['posts'])}/{participant['post_limit']}\n\n"
        f"‚úíÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /editmycom –ø–æ—Å—Ç1 –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
    )


async def handle_mycom_comments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞"""
    user_id = update.effective_user.id
    
    if 'editing_post' not in context.user_data:
        return
    
    if user_id not in mycom_participants:
        return
    
    post_key = context.user_data['editing_post']
    comments = update.message.text.strip().split('\n')[:3]
    
    mycom_participants[user_id]['comments'][post_key] = comments
    
    await update.message.reply_text(
        f"üíæ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {post_key}!\n\n"
        f"üíª –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
    )
    
    del context.user_data['editing_post']


async def start_mycom_task_distribution(context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ"""
    mycom_contest['active'] = True
    mycom_contest['registration'] = False
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for user_id in mycom_participants.keys():
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üí® MyCom –∑–∞–ø—É—â–µ–Ω!ü´£\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ‚òëÔ∏è"
            )
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            await send_mycom_task(user_id, context)
            
        except Exception as e:
            logger.error(f"Error starting contest for user {user_id}: {e}")


async def send_mycom_task(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É"""
    if user_id not in mycom_participants:
        return
    
    participant = mycom_participants[user_id]
    
    # –ù–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    other_participants = [
        uid for uid in mycom_participants.keys()
        if uid != user_id and mycom_participants[uid]['posts']
    ]
    
    if not other_participants:
        return
    
    target_user_id = random.choice(other_participants)
    target_participant = mycom_participants[target_user_id]
    
    # –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç
    if not target_participant['posts']:
        return
    
    post = random.choice(target_participant['posts'])
    post_key = post['key']
    
    # –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    comments = target_participant['comments'].get(post_key, [])
    if not comments:
        comment = "–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µüôä"
    else:
        comment = random.choice(comments)
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", callback_data=f"mycom_done_{target_user_id}_{post_key}"),
         InlineKeyboardButton("üîÅ –°–ª–µ–¥—É—é—â–∏–π", callback_data="mycom_next")],
        [InlineKeyboardButton("üö® –ñ–∞–ª–æ–±–∞", callback_data=f"mycom_report_{target_user_id}")]
    ]
    
    target_user = users_db.get(target_user_id, {})
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                f"‚ùï –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï\n\n"
                f"üôã‚Äç‚ôÄÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{target_user.get('username', 'unknown')}\n"
                f"‚õìÔ∏è –ü–æ—Å—Ç: {post['url']}\n\n"
                f"üßë‚Äçüè´ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{comment}\n\n"
                f"–û—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'"
            ),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        participant['last_action'] = datetime.now(BUDAPEST_TZ)
        
    except Exception as e:
        logger.error(f"Error sending task to {user_id}: {e}")


async def mycom_task_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    data_parts = query.data.split('_')
    
    if len(data_parts) < 4:
        return
    
    target_user_id = int(data_parts[2])
    post_key = data_parts[3]
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –ø–æ—Å—Ç–∞
    keyboard = [
        [InlineKeyboardButton("üîî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"mycom_confirm_{user_id}"),
         InlineKeyboardButton("üîï –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"mycom_reject_{user_id}")]
    ]
    
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=(
                f"üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç @{users_db[user_id]['username']} "
                f"üñãÔ∏è –ø—Ä–æ–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø–æ—Å—Ç ({post_key}).\n\n"
                f"üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ :"
            ),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        await query.edit_message_text(
            "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!\n"
            "‚ñ™Ô∏è –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–æ 10 –º–∏–Ω—É—Ç)."
        )
        
        # –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        context.job_queue.run_once(
            auto_confirm_mycom,
            when=600,
            data={'executor_id': user_id, 'target_id': target_user_id}
        )
        
    except Exception as e:
        logger.error(f"Error notifying target user: {e}")


async def mycom_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    query = update.callback_query
    await query.answer()
    
    executor_id = int(query.data.split('_')[2])
    
    if executor_id in mycom_participants:
        mycom_participants[executor_id]['score'] += 1
        
        try:
            await context.bot.send_message(
                chat_id=executor_id,
                text="‚úÖ MyCom–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! +1 –±–∞–ª–ª üî•"
            )
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
            await send_mycom_task(executor_id, context)
            
        except Exception as e:
            logger.error(f"Error confirming task: {e}")
    
    await query.edit_message_text("‚úÖ MyCom–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω‚ùï")


async def mycom_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    query = update.callback_query
    await query.answer()
    
    executor_id = int(query.data.split('_')[2])
    target_id = update.effective_user.id
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
    try:
        await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=(
                f"‚ö†Ô∏è –°–ü–û–†–ù–´–ô –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô MYCOM\n\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{users_db.get(executor_id, {}).get('username', 'unknown')}\n"
                f"–í–ª–∞–¥–µ–ª–µ—Ü –ø–æ—Å—Ç–∞: @{users_db.get(target_id, {}).get('username', 'unknown')}\n\n"
                f"–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ç–∫–ª–æ–Ω–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
            )
        )
    except Exception as e:
        logger.error(f"Error sending to admin group: {e}")
    
    await query.edit_message_text("üöî MyCom–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")


async def mycom_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    query = update.callback_query
    await query.answer("üò¥ –û–∂–∏–¥–∞–π—Ç–µ 10 –º–∏–Ω—É—Ç")
    
    user_id = update.effective_user.id
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    context.job_queue.run_once(
        lambda ctx: send_mycom_task(user_id, ctx),
        when=600
    )
    
    await query.edit_message_text(
        "üöÖ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.\n\n"
        "üöù –ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π!"
    )

async def mycom_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ñ–∞–ª–æ–±–∞ –Ω–∞ ü§¨"""
    query = update.callback_query
    await query.answer()
    
    target_user_id = int(query.data.split('_')[2])
    reporter_id = update.effective_user.id
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=(
                f"üö® –ñ–ê–õ–û–ë–ê –í MYCOM\n\n"
                f"ü§¨ –û—Ç: @{users_db.get(reporter_id, {}).get('username', 'unknown')}\n"
                f"ü´£ –ù–∞: @{users_db.get(target_user_id, {}).get('username', 'unknown')}\n\n"
                f"üßëüèΩ‚Äç‚öñÔ∏è –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ."
            )
        )
        
        await query.edit_message_text("ü•µ –ñ–∞–ª–æ–±–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è")
        
    except Exception as e:
        logger.error(f"Error sending report: {e}")


async def auto_confirm_mycom(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"""
    executor_id = context.job.data['executor_id']
    
    if executor_id in mycom_participants:
        mycom_participants[executor_id]['score'] += 1
        
        try:
            await context.bot.send_message(
                chat_id=executor_id,
                text="‚òëÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω‚ùï +1 –±–∞–ª–ª üî•"
            )
            
            await send_mycom_task(executor_id, context)
            
        except Exception as e:
            logger.error(f"Error auto-confirming: {e}")


async def check_mycom_inactivity(context: ContextTypes.DEFAULT_TYPE):
    """üöì –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if not mycom_contest['active']:
        return
    
    now = datetime.now(BUDAPEST_TZ)
    inactive_threshold = timedelta(minutes=10)
    
    for user_id, participant in list(mycom_participants.items()):
        if not participant['active']:
            continue
        
        time_since_last = now - participant['last_action']
        
        if time_since_last > inactive_threshold:
            participant['active'] = False
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="üí§ –í–∞—Å –∏—Å–∫–ª—é—á–∏–ª–∏ –∏–∑ –∫–æ–Ω–∫—É—Ä—Å–∞ –∑–∞ –ê–§–ö (10 –º–∏–Ω—É—Ç)."
                )
            except Exception as e:
                logger.error(f"Error notifying inactive user {user_id}: {e}")


async def end_mycom_contest(context: ContextTypes.DEFAULT_TYPE):
    """üôã‚Äç‚ôÄÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ MyCom"""
    mycom_contest['active'] = False
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    sorted_participants = sorted(
        mycom_participants.items(),
        key=lambda x: x[1]['score'],
        reverse=True
    )[:3]
    
    # –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_text = "üí® MYCOM –ó–ê–í–ï–†–®–Å–ù!\n\n"
    
    for idx, (user_id, data) in enumerate(sorted_participants, 1):
        user = users_db.get(user_id, {})
        username = user.get('username', 'unknown')
        
        medal = ["ü•á", "ü•à", "ü•â"][idx-1] if idx <= 3 else f"{idx}."
        result_text += f"{medal} @{username} ({data['score']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)\n"
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    try:
        await context.bot.send_message(
            chat_id=USER_CHAT_ID,
            text=result_text
        )
    except Exception as e:
        logger.error(f"Error sending results to chat: {e}")
    
    for user_id in mycom_participants.keys():
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=result_text
            )
        except Exception as e:
            logger.error(f"Error notifying participant {user_id}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    mycom_history.append({
        'date': datetime.now(BUDAPEST_TZ),
        'winners': sorted_participants
    })
    
    # –û—á–∏—Å—Ç–∫–∞
    mycom_participants.clear()


# ============== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ MYCOM ==============

async def admin_mycom_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å MyCom"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (12:00 - 22:00)
    hour = random.randint(12, 22)
    minute = random.randint(0, 59)
    
    today = datetime.now(BUDAPEST_TZ).replace(hour=hour, minute=minute, second=0)
    
    if today < datetime.now(BUDAPEST_TZ):
        today += timedelta(days=1)
    
    # –ó–∞ —á–∞—Å –¥–æ —Å—Ç–∞—Ä—Ç–∞ - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    registration_time = today - timedelta(hours=1)
    
    mycom_contest['start_time'] = today
    mycom_contest['end_time'] = today + timedelta(minutes=120)
    mycom_contest['registration'] = False
    
    await update.message.reply_text(
        f"üí® –ù–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å MyCom –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω‚ùï\n\n"
        f"ü§ç –ö–æ–≥–¥–∞?: {today.strftime('%d.%m.%Y')}\n"
        f"üïê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registration_time.strftime('%H:%M')}\n"
        f"üïê –ù–∞—á–∞–ª–æ: {today.strftime('%H:%M')}\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –î–≤–∞ —á–∞—Å–∞"
    )
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    delay_to_registration = (registration_time - datetime.now(BUDAPEST_TZ)).total_seconds()
    if delay_to_registration > 0:
        context.job_queue.run_once(
            open_mycom_registration,
            when=delay_to_registration,
            data={'start_time': today}
        )
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç
    delay_to_start = (today - datetime.now(BUDAPEST_TZ)).total_seconds()
    if delay_to_start > 0:
        context.job_queue.run_once(
            start_mycom_task_distribution,
            when=delay_to_start,
            data={}
        )
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    delay_to_end = (mycom_contest['end_time'] - datetime.now(BUDAPEST_TZ)).total_seconds()
    if delay_to_end > 0:
        context.job_queue.run_once(
            end_mycom_contest,
            when=delay_to_end,
            data={}
        )


async def open_mycom_registration(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å"""
    mycom_contest['registration'] = True
    
    start_time = context.job.data['start_time']
    
    # –ê–Ω–æ–Ω—Å –≤ —á–∞—Ç–µ
    try:
        await context.bot.send_message(
            chat_id=USER_CHAT_ID,
            text=(
                f"üì£ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ê MYCOM –û–¢–ö–†–´–¢–ê!\n\n"
                f"üïê –°—Ç–∞—Ä—Ç –∫–æ–Ω–∫—É—Ä—Å–∞: {start_time.strftime('%H:%M')}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 120 –º–∏–Ω—É—Ç\n\n"
                f"üñãÔ∏è –ö–æ–º–∞–Ω–¥–∞ /mycomjoin –¥–ª—è —É—á–∞—Å—Ç–∏—è!\n\n"
                f"‚ö†Ô∏è –ó–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–∞–Ω—å—à–µ —Å–µ–º–∏ –¥–Ω–µ–π - –±–∞–Ω üìõ"
            )
        )
    except Exception as e:
        logger.error(f"Error announcing registration: {e}")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in users_db.keys():
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üîî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ MyCom –∑–∞–ø—É—â–µ–Ω–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mycomjoin"
            )
        except Exception as e:
            logger.error(f"Error notifying user {user_id}: {e}")


async def admin_mycom_postlimit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —é–∑–µ—Ä–∞"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ñ™Ô∏è–ö–æ–º–∞–Ω–¥–∞: /mycompostlimit @username 1-4")
        return
    
    username = context.args[0].replace('@', '')
    try:
        new_limit = int(context.args[1])
        if new_limit < 1 or new_limit > 4:
            await update.message.reply_text("–õ–∏–º–∏—Ç –æ—Ç 1 –¥–æ 4")
            return
    except ValueError:
        await update.message.reply_text("ü§¨ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π..")
        return
    
    # –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            if user_id in mycom_participants:
                mycom_participants[user_id]['post_limit'] = new_limit
                
                await update.message.reply_text(
                    f"‚öôÔ∏è –ü–æ—Å—Ç Limit –¥–ª—è @{username}: {new_limit}"
                )
                
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üíå –õ–∏–º–∏—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ üí®MyCom —Ç–µ–ø–µ—Ä—å {new_limit}"
                    )
                except Exception as e:
                    logger.error(f"Error notifying user: {e}")
                
                return
            else:
                await update.message.reply_text(f"@{username} üö© –ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç")
                return
    
    await update.message.reply_text(f"üîÆ –ü–µ—Ä—Å–æ–Ω–∞–∂ @{username} –ø–æ—Ç–µ—Ä—è–Ω –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ü•µ")


async def admin_mycom_ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–±–∞–Ω–∏—Ç—å ü§¨ –≤ üí®MyCom"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–Æ–∑–∞–π: /mycomban @username")
        return
    
    username = context.args[0].replace('@', '')
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            if user_id not in mycom_banned:
                mycom_banned.append(user_id)
                
                # –£–¥–∞–ª–∏—Ç—å –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ —É—á–∞—Å—Ç–≤—É–µ—Ç
                if user_id in mycom_participants:
                    del mycom_participants[user_id]
                
                await update.message.reply_text(f"üöó @{username} –∑–∞–±–∞–Ω–µ–Ω –¥–ª—è üí®MyCom")
                
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="üö© –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–µ üí®MyCom‚ÄºÔ∏è"
                    )
                except Exception as e:
                    logger.error(f"Error notifying user: {e}")
                
                return
            else:
                await update.message.reply_text(f"@{username} —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω")
                return
    
    await update.message.reply_text(f"–£–≤–∞–∂–∞–µ–º—ã–π @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_mycom_banlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üí®MyCom –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ë–∞–Ω–õ–∏—Å—Ç"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if not mycom_banned:
        await update.message.reply_text("ü´ó –ü–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ")
        return
    
    text = "üö´ –ó–∞–±–∞–Ω–µ–Ω—ã –≤ üí®MyCom:\n\n"
    
    for user_id in mycom_banned:
        user = users_db.get(user_id, {})
        username = user.get('username', 'unknown')
        text += f"‚Ä¢ @{username}\n"
    
    await update.message.reply_text(text)
