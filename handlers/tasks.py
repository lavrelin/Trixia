"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π
"""
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from config import TASK_COSTS, DAILY_LIMITS, BUDAPEST_TZ, TASK_FREEZE_TIME, ADMIN_GROUP_ID
from database import (get_user, add_task, remove_task, get_task, freeze_task,
                     unfreeze_task, get_frozen_task, users_db, tasks_db, announcement_subscribers)
from utils import is_content_safe, can_interact, generate_task_id, get_user_keyboard

logger = logging.getLogger(__name__)


async def handle_task_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    user_id = query.from_user.id
    user = get_user(user_id)
    
    task_type = query.data.split('_')[1]
    cost = TASK_COSTS[task_type]
    limit_key = 'likes' if task_type == 'like' else 'comments' if task_type in ['comment', 'special'] else 'follows'
    
    if user['trixiki'] < cost:
        await query.edit_message_text(
            f"ü™´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–∏–∫—Å–∏–∫–æ–≤!\n"
            f"–ù—É–∂–Ω–æ: {cost} ü™É\n–ï—Å—Ç—å: {user['trixiki']} ü™É",
            reply_markup=get_user_keyboard()
        )
        return
    
    if user['daily_tasks_created'][limit_key] >= DAILY_LIMITS[task_type]:
        await query.edit_message_text(
            f"üîê –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {user['daily_tasks_created'][limit_key]}/{DAILY_LIMITS[task_type]}",
            reply_markup=get_user_keyboard()
        )
        return
    
    context.user_data['creating_task'] = {
        'type': task_type,
        'cost': cost,
        'limit_key': limit_key
    }
    
    if task_type == 'like':
        msg = "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç üüßInstagram üßµThreads"
    elif task_type == 'comment':
        msg = "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –¥–ª—è ‚úçÔ∏è–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
    elif task_type == 'special':
        msg = "üîó –®–∞–≥ 1/2: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç"
    else:  # follow
        msg = "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"
    
    await query.edit_message_text(msg)


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # USDT –∞–¥—Ä–µ—Å
    if context.user_data.get('adding_usdt'):
        if text.startswith('T') and len(text) == 34:
            user = get_user(user_id)
            if user:
                user['usdt_address'] = text
            await update.message.reply_text(
                f"$USDT –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n{text}",
                reply_markup=get_user_keyboard()
            )
            context.user_data.clear()
        else:
            await update.message.reply_text("‚ÄºÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å USDT TRC-20")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    if 'creating_task' in context.user_data:
        if 'link' in context.user_data['creating_task']:
            await handle_special_comment(update, context)
        else:
            await handle_task_link(update, context)


async def handle_task_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    link = update.message.text.strip()
    
    if not (link.startswith('https://instagram.com') or link.startswith('https://threads.net')):
        await update.message.reply_text("üò° –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!")
        return
    
    if not is_content_safe(link):
        await update.message.reply_text("üöî –°—Å—ã–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!")
        return
    
    task_data = context.user_data['creating_task']
    user = get_user(user_id)
    
    if task_data['type'] == 'special':
        context.user_data['creating_task']['link'] = link
        await update.message.reply_text(
            "üîó –®–∞–≥ 2/2: –ù–∞–ø–∏—à–∏—Ç–µ ‚úçÔ∏è–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n\n"
            "–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –Ω–∞ –≤–∞—à –ø–æ—Å—Ç"
        )
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    task_id = generate_task_id(user_id)
    
    task = {
        'id': task_id,
        'creator_id': user_id,
        'type': task_data['type'],
        'link': link,
        'reward': task_data['cost'],
        'created_at': datetime.now(BUDAPEST_TZ).isoformat()
    }
    
    add_task(task)
    user['trixiki'] -= task_data['cost']
    user['daily_tasks_created'][task_data['limit_key']] += 1
    
    await update.message.reply_text(
        f"üî∞ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ\n\n"
        f"–¢–∏–ø: {task_data['type'].upper()}\n"
        f"–°–ø–∏—Å–∞–Ω–æ: {task_data['cost']} ü™É\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['trixiki']}/{user['max_limit']} ü™É",
        reply_markup=get_user_keyboard()
    )
    
    context.user_data.clear()


async def handle_special_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    user_id = update.effective_user.id
    comment = update.message.text.strip()
    
    if not is_content_safe(comment):
        await update.message.reply_text("üëÆ‚Äç‚ôÇÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç‚ÄºÔ∏è")
        return
    
    if len(comment) > 500:
        await update.message.reply_text("„Ä∞Ô∏è–î–ª–∏–Ω–Ω—ã–π‚ùóÔ∏èLimit 500 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    task_data = context.user_data['creating_task']
    user = get_user(user_id)
    task_id = generate_task_id(user_id)
    
    task = {
        'id': task_id,
        'creator_id': user_id,
        'type': 'special_comment',
        'link': task_data['link'],
        'comment': comment,
        'reward': task_data['cost'],
        'created_at': datetime.now(BUDAPEST_TZ).isoformat()
    }
    
    add_task(task)
    user['trixiki'] -= task_data['cost']
    user['daily_tasks_created'][task_data['limit_key']] += 1
    
    await update.message.reply_text(
        f"üìó Special Comment —Å–æ–∑–¥–∞–Ω!\n\n"
        f"–°–ø–∏—Å–∞–Ω–æ: {task_data['cost']} ü™É\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['trixiki']}/{user['max_limit']} ü™É",
        reply_markup=get_user_keyboard()
    )
    
    context.user_data.clear()


async def show_task_details(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è"""
    task_id = query.data.split('_')[1]
    user_id = query.from_user.id
    
    task = get_task(task_id)
    
    if not task:
        await query.edit_message_text("‚ùóÔ∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    if task['creator_id'] == user_id:
        await query.edit_message_text("üò° –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!")
        return
    
    if not can_interact(user_id, task['creator_id']):
        await query.edit_message_text(
            "üöó –í—ã –Ω–µ–¥–∞–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n"
            "Coldown 8 —á–∞—Å–æ–≤."
        )
        return
    
    text = f"‚ùï –ó–ê–î–ê–ù–ò–ï #{task_id}\n\n"
    text += f"–¢–∏–ø: {task['type'].upper()}\n"
    text += f"–°—Å—ã–ª–∫–∞: {task['link']}\n"
    
    if 'comment' in task:
        text += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{task['comment']}\n"
    
    text += f"\nüí≥ –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ü™É\n\n"
    text += "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:"
    
    keyboard = [
        [InlineKeyboardButton("‚òëÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{task_id}")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="pool")]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def mark_task_done(query, context):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ"""
    task_id = query.data.split('_')[1]
    user_id = query.from_user.id
    
    task = get_task(task_id)
    
    if not task:
        await query.edit_message_text("üò° –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    # –ó–∞–º–æ—Ä–æ–∑–∫–∞
    freeze_task(task_id, {
        'executor_id': user_id,
        'task': task,
        'frozen_at': datetime.now(BUDAPEST_TZ),
        'unfreezes_at': datetime.now(BUDAPEST_TZ) + timedelta(seconds=TASK_FREEZE_TIME)
    })
    
    # –û–±–Ω–æ–≤–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    user = get_user(user_id)
    if user:
        user['last_interaction'][task['creator_id']] = datetime.now(BUDAPEST_TZ)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
    executor = get_user(user_id)
    keyboard = [
        [InlineKeyboardButton("üî∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data=f"confirm_{task_id}"),
         InlineKeyboardButton("‚ô¶Ô∏è –û—Ç–∫–ª–æ–Ω—è—é", callback_data=f"reject_{task_id}")]
    ]
    
    try:
        await context.bot.send_message(
            chat_id=task['creator_id'],
            text=(
                f"üî∞ –ó–ê–î–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–û\n\n"
                f"üß¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{executor.get('username', 'unknown')}\n"
                f"üåå –¢–∏–ø: {task['type'].upper()}\n"
                f"üíù –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ü™É\n\n"
                f"üü© –í —Ç–µ—á–µ–Ω–∏–∏ 3 —á–∞—Å–æ–≤ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
            ),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"Error: {e}")
    
    await query.edit_message_text(
        "üíô –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ!\n\n"
        "üí§ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–æ 3 —á–∞—Å–æ–≤)",
        reply_markup=get_user_keyboard()
    )
    
    # –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
    context.job_queue.run_once(
        auto_confirm,
        when=TASK_FREEZE_TIME,
        data={'task_id': task_id}
    )


async def confirm_task(query, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    task_id = query.data.split('_')[1]
    frozen = get_frozen_task(task_id)
    
    if not frozen:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
        return
    
    executor_id = frozen['executor_id']
    task = frozen['task']
    reward = task['reward']
    
    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ
    executor = get_user(executor_id)
    if executor:
        executor['trixiki'] = min(executor['trixiki'] + reward, executor['max_limit'])
        executor['stats']['total_earned'] += reward
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if task['type'] == 'like':
            executor['stats']['likes_given'] += 1
            users_db[task['creator_id']]['stats']['likes_received'] += 1
        elif 'comment' in task['type']:
            executor['stats']['comments_given'] += 1
            users_db[task['creator_id']]['stats']['comments_received'] += 1
        elif task['type'] == 'follow':
            executor['stats']['follows_given'] += 1
            users_db[task['creator_id']]['stats']['follows_received'] += 1
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        await check_achievements(executor_id, context)
        
        try:
            await context.bot.send_message(
                chat_id=executor_id,
                text=f"üíö–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n\n+{reward} ü™É"
            )
        except Exception as e:
            logger.error(f"Error: {e}")
    
    remove_task(task_id)
    unfreeze_task(task_id)
    
    await query.edit_message_text("–ó–∞–¥–∞–Ω–∏–µ üíö–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")


async def reject_task(query, context):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    task_id = query.data.split('_')[1]
    frozen = get_frozen_task(task_id)
    
    if not frozen:
        await query.edit_message_text("ü´° –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
        return
    
    executor = get_user(frozen['executor_id'])
    creator = get_user(frozen['task']['creator_id'])
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=(
                f"‚ö†Ô∏è –°–ü–û–†–ù–û–ï –ó–ê–î–ê–ù–ò–ï\n\n"
                f"ü•µ –°–æ–∑–¥–∞—Ç–µ–ª—å: @{creator.get('username', 'unknown')}\n"
                f"ü´£ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{executor.get('username', 'unknown')}\n"
                f"üî¨ –¢–∏–ø: {frozen['task']['type']}\n"
                f"‚õìÔ∏è –°—Å—ã–ª–∫–∞: {frozen['task']['link']}"
            )
        )
    except Exception as e:
        logger.error(f"Error: {e}")
    
    unfreeze_task(task_id)
    await query.edit_message_text("üöó –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º")


async def auto_confirm(context):
    """–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    task_id = context.job.data['task_id']
    frozen = get_frozen_task(task_id)
    
    if not frozen:
        return
    
    executor_id = frozen['executor_id']
    reward = frozen['task']['reward']
    
    executor = get_user(executor_id)
    if executor:
        executor['trixiki'] = min(executor['trixiki'] + reward, executor['max_limit'])
        executor['stats']['total_earned'] += reward
        
        try:
            await context.bot.send_message(
                chat_id=executor_id,
                text=f"‚úÖ –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!\n\n+{reward} ü™É"
            )
        except Exception as e:
            logger.error(f"Error: {e}")
    
    remove_task(task_id)
    unfreeze_task(task_id)


async def check_achievements(user_id: int, context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    from config import ACHIEVEMENTS
    
    user = get_user(user_id)
    if not user:
        return
    
    stats = user['stats']
    achievements = user['achievements']
    new_achievements = []
    
    # –õ–∞–π–∫–∏
    for milestone in ACHIEVEMENTS['likes']:
        ach_name = f"likes_{milestone}"
        if stats['likes_given'] >= milestone and ach_name not in achievements:
            achievements.append(ach_name)
            new_achievements.append(f"üèÜ {milestone} –ª–∞–π–∫–æ–≤!")
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    for milestone in ACHIEVEMENTS['comments']:
        ach_name = f"comments_{milestone}"
        if stats['comments_given'] >= milestone and ach_name not in achievements:
            achievements.append(ach_name)
            new_achievements.append(f"üèÜ {milestone} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!")
    
    # –ü–æ–¥–ø–∏—Å–∫–∏
    for milestone in ACHIEVEMENTS['follows']:
        ach_name = f"follows_{milestone}"
        if stats['follows_given'] >= milestone and ach_name not in achievements:
            achievements.append(ach_name)
            new_achievements.append(f"üèÜ {milestone} –ø–æ–¥–ø–∏—Å–æ–∫!")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if new_achievements:
        achievement_text = "\n".join(new_achievements)
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üîà –ù–û–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø!\n\n{achievement_text}"
            )
            
            await context.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=f"üèÜ @{user['username']} –ø–æ–ª—É—á–∏–ª:\n{achievement_text}"
            )
        except Exception as e:
            logger.error(f"Error: {e}")


async def send_task_announcements(context):
    """–†–∞—Å—Å—ã–ª–∫–∞ –∞–Ω–æ–Ω—Å–æ–≤"""
    if not tasks_db or not announcement_subscribers:
        return
    
    recent_tasks = tasks_db[-5:]
    
    text = "üíô –ù–û–í–´–ï –ó–ê–î–ê–ù–ò–Ø:\n\n"
    for idx, task in enumerate(recent_tasks, 1):
        creator = users_db.get(task['creator_id'], {})
        text += f"{idx}. {task['type'].upper()} | {task['reward']} ü™É\n"
    
    text += "\n–ò—Å–ø–æ–ª—å–∑—É–π /pool!"
    
    for user_id in announcement_subscribers:
        try:
            await context.bot.send_message(chat_id=user_id, text=text)
        except Exception as e:
            logger.error(f"Error: {e}")
