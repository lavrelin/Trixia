"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
"""
import random
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import BUDAPEST_TZ, USER_CHAT_ID, DAILY_BONUS_MIN, DAILY_BONUS_MAX
from database import get_user, get_available_tasks, user_reports, announcement_subscribers, users_db
from utils import get_user_keyboard, format_stats
from quests import DAILY_QUESTS


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    user = get_user(user_id)
    
    if user:
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {update.effective_user.first_name}! üéâ",
            reply_markup=get_user_keyboard()
        )
    else:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trixiki Bot!\n\n"
            "üéØ –û–±–º–µ–Ω–∏–≤–∞–π—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ Instagram/Threads\n"
            "ü™É –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Ç—Ä–∏–∫—Å–∏–∫–∏\n"
            "üèÜ –ü–æ–ª—É—á–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /reg –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!"
        )


async def daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /daily"""
    user_id = update.effective_user.id
    user = get_user(user_id)
    
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    if user['daily_claimed']:
        await update.message.reply_text(
            "‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!\n"
            "–°–ª–µ–¥—É—é—â–∏–π –≤ 00:00 –ø–æ –ë—É–¥–∞–ø–µ—à—Ç—É"
        )
        return
    
    base_bonus = random.randint(DAILY_BONUS_MIN, DAILY_BONUS_MAX)
    quest = random.choice(DAILY_QUESTS)
    quest_reward = user['max_limit']
    
    keyboard = [[InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –∫–≤–µ—Å—Ç", callback_data="quest_done")]]
    
    await update.message.reply_text(
        f"üéÅ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–°\n\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ: +{base_bonus} ü™É\n\n"
        f"üìã –ö–≤–µ—Å—Ç –¥–Ω—è:\n{quest}\n\n"
        f"üéØ –ù–∞–≥—Ä–∞–¥–∞: {quest_reward} ü™É\n\n"
        f"–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–≤–µ—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    user['trixiki'] = min(user['trixiki'] + base_bonus, user['max_limit'])
    user['daily_claimed'] = True


async def pool(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /pool"""
    user_id = update.effective_user.id
    
    if not get_user(user_id):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    tasks = get_available_tasks(user_id, 10)
    
    if not tasks:
        await update.message.reply_text(
            "üßä –ü—É–ª –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç!\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ‚ù§Ô∏è Like/Comment/Follow",
            reply_markup=get_user_keyboard()
        )
        return
    
    text = "üßä –î–û–°–¢–£–ü–ù–´–ï –ó–ê–î–ê–ù–ò–Ø:\n\n"
    buttons = []
    
    for idx, task in enumerate(tasks, 1):
        creator = users_db.get(task['creator_id'], {})
        text += (
            f"{idx}. {task['type'].upper()}\n"
            f"   –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ü™É\n"
            f"   –û—Ç: @{creator.get('username', 'unknown')}\n\n"
        )
        buttons.append([InlineKeyboardButton(
            f"‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å #{idx}",
            callback_data=f"dotask_{task['id']}"
        )])
    
    buttons.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pool")])
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons)
    )


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats"""
    if len(context.args) == 0:
        target_id = update.effective_user.id
    else:
        username = context.args[0].replace('@', '')
        target_id = None
        for uid, udata in users_db.items():
            if udata.get('username') == username:
                target_id = uid
                break
        
        if not target_id:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    
    user = get_user(target_id)
    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = (
        f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê @{user.get('username', 'unknown')}\n\n"
        f"{format_stats(user['stats'])}\n\n"
        f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user['achievements'])}\n"
        f"ü™É –õ–∏–º–∏—Ç: {user['max_limit']}"
    )
    
    await update.message.reply_text(text)


async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /top"""
    keyboard = [
        [InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫–∏", callback_data="top_likes")],
        [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="top_comments")],
        [InlineKeyboardButton("üë• –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="top_follows")],
        [InlineKeyboardButton("ü™É –õ–∏–º–∏—Ç", callback_data="top_limit")]
    ]
    
    await update.message.reply_text(
        "üèÜ –†–ï–ô–¢–ò–ù–ì\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /check"""
    from config import ADMIN_GROUP_ID
    
    user_id = update.effective_user.id
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check @username –ø—Ä–∏—á–∏–Ω–∞\n\n"
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å 1 –∂–∞–ª–æ–±—É –≤ —á–∞—Å"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    last_report = user_reports.get(user_id)
    if last_report:
        time_passed = (datetime.now(BUDAPEST_TZ) - last_report).total_seconds()
        if time_passed < 3600:
            minutes_left = int((3600 - time_passed) / 60)
            await update.message.reply_text(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –∂–∞–ª–æ–±–∞ —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω—É—Ç")
            return
    
    username = context.args[0].replace('@', '')
    reason = ' '.join(context.args[1:])
    reporter = update.effective_user
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=(
                f"‚ö†Ô∏è –ñ–ê–õ–û–ë–ê\n\n"
                f"–û—Ç: @{reporter.username}\n"
                f"–ù–∞: @{username}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        )
        
        user_reports[user_id] = datetime.now(BUDAPEST_TZ)
        await update.message.reply_text("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")


async def randompool(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /randompool"""
    user_id = update.effective_user.id
    
    if not get_user(user_id):
        await update.message.reply_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    tasks = get_available_tasks(user_id, 999)
    
    if not tasks:
        await update.message.reply_text("üßä –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
        return
    
    task = random.choice(tasks)
    creator = users_db.get(task['creator_id'], {})
    
    text = (
        f"üé≤ –°–õ–£–ß–ê–ô–ù–û–ï –ó–ê–î–ê–ù–ò–ï\n\n"
        f"–¢–∏–ø: {task['type'].upper()}\n"
        f"–û—Ç: @{creator.get('username', 'unknown')}\n"
        f"–°—Å—ã–ª–∫–∞: {task['link']}\n"
    )
    
    if 'comment' in task:
        text += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{task['comment']}\n"
    
    text += f"\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ü™É"
    
    keyboard = [[InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"dotask_{task['id']}")]]
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def addusdt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /addusdt"""
    user_id = update.effective_user.id
    
    if not get_user(user_id):
        await update.message.reply_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    await update.message.reply_text(
        "üîê USDT TRC-20\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à USDT TRC-20 –∞–¥—Ä–µ—Å:\n"
        "(–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å T...)"
    )
    
    context.user_data['adding_usdt'] = True


async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /donate"""
    from database import donations
    
    keyboard = [
        [InlineKeyboardButton("üéØ –¶–µ–ª—å", callback_data="donate_goal")],
        [InlineKeyboardButton("üë• –î–æ–Ω–∞—Ç–æ—Ä—ã", callback_data="donate_donors")],
        [InlineKeyboardButton("üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="donate_details")],
        [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç—ã", callback_data="donate_reports")]
    ]
    
    await update.message.reply_text(
        f"üí≥ –î–û–ù–ê–¢–´\n\n"
        f"–¶–µ–ª—å: {donations['goal']}\n"
        f"–°–æ–±—Ä–∞–Ω–æ: {donations['amount']}\n\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def onanons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /onanons"""
    user_id = update.effective_user.id
    
    if user_id not in announcement_subscribers:
        announcement_subscribers.append(user_id)
    
    await update.message.reply_text(
        "‚úÖ –ê–Ω–æ–Ω—Å—ã –≤–∫–ª—é—á–µ–Ω—ã!\n\n"
        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö"
    )


async def offanons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /offanons"""
    user_id = update.effective_user.id
    
    if user_id in announcement_subscribers:
        announcement_subscribers.remove(user_id)
    
    await update.message.reply_text("‚ùå –ê–Ω–æ–Ω—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = (
        "üìñ –°–ü–†–ê–í–ö–ê TRIXIKI BOT\n\n"
        "üéØ –û–°–ù–û–í–ù–´–ï:\n"
        "/start - –ù–∞—á–∞–ª–æ\n"
        "/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/daily - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n"
        "/profile - –ü—Ä–æ—Ñ–∏–ª—å\n"
        "/trixiki - –ë–∞–ª–∞–Ω—Å\n"
        "/pool - –ó–∞–¥–∞–Ω–∏—è\n"
        "/randompool - –°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n"
        "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        "/stats [@user] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/top - –†–µ–π—Ç–∏–Ω–≥\n\n"
        "üí∞ –¶–ï–ù–´:\n"
        "‚ù§Ô∏è Like - 3 ü™É (–º–∞–∫—Å 3/–¥–µ–Ω—å)\n"
        "üí¨ Comment - 4 ü™É (–º–∞–∫—Å 2/–¥–µ–Ω—å)\n"
        "üí¨ Special - 10 ü™É\n"
        "üë• Follow - 5 ü™É\n\n"
        "üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:\n"
        "/addusdt - –î–æ–±–∞–≤–∏—Ç—å USDT –∞–¥—Ä–µ—Å\n"
        "/donate - –î–æ–Ω–∞—Ç—ã\n"
        "/check @user - –ñ–∞–ª–æ–±–∞ (1/—á–∞—Å)\n"
        "/onanons - –í–∫–ª—é—á–∏—Ç—å –∞–Ω–æ–Ω—Å—ã\n"
        "/offanons - –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–æ–Ω—Å—ã\n\n"
        "‚ö†Ô∏è –ü–†–ê–í–ò–õ–ê:\n"
        "‚Ä¢ –ù–µ —É–¥–∞–ª—è—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ = –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç\n"
        "‚Ä¢ –§–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è\n"
        "‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑ –≤ 8 —á–∞—Å–æ–≤\n\n"
        f"üí¨ –ß–∞—Ç: https://t.me/c/{str(USER_CHAT_ID)[4:]}/1"
    )
    
    await update.message.reply_text(help_text)
