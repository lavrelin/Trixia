"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""
import random
import re
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from config import FORBIDDEN_PATTERNS, BUDAPEST_TZ
from database import users_db


def get_user_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        [InlineKeyboardButton("üßä Pool", callback_data="pool"),
         InlineKeyboardButton("ü™É Trixiki", callback_data="trixiki")],
        [InlineKeyboardButton("‚ù§Ô∏è Like/Comment/Follow", callback_data="actions")],
        [InlineKeyboardButton("üåÄ Profile", callback_data="profile")]
    ]
    return InlineKeyboardMarkup(keyboard)


def generate_user_number(gender: str) -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    while True:
        if gender.upper() == '–ñ':
            number = random.randrange(1, 10000, 2)  # –Ω–µ—á–µ—Ç–Ω—ã–µ
        else:
            number = random.randrange(2, 10000, 2)  # —á–µ—Ç–Ω—ã–µ
        
        if not any(u.get('number') == number for u in users_db.values()):
            return number


def is_content_safe(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    text_lower = text.lower()
    for pattern in FORBIDDEN_PATTERNS:
        if re.search(pattern, text_lower):
            return False
    return True


def can_interact(user1_id: int, user2_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (—Ä–∞–∑ –≤ 8 —á–∞—Å–æ–≤)"""
    user1 = users_db.get(user1_id)
    if not user1:
        return True
    
    last_interaction = user1.get('last_interaction', {}).get(user2_id)
    if not last_interaction:
        return True
    
    time_passed = (datetime.now(BUDAPEST_TZ) - last_interaction).total_seconds()
    return time_passed >= 28800  # 8 —á–∞—Å–æ–≤


def format_stats(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return (
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {stats['likes_given']}/{stats['likes_received']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['comments_given']}/{stats['comments_received']}\n"
        f"üë• –ü–æ–¥–ø–∏—Å–æ–∫: {stats['follows_given']}/{stats['follows_received']}\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earned']} ü™É"
    )


def get_task_type_emoji(task_type: str) -> str:
    """–≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è"""
    emojis = {
        'like': '‚ù§Ô∏è',
        'comment': 'üí¨',
        'special': 'üí¨',
        'follow': 'üë•'
    }
    return emojis.get(task_type, 'üìã')


def generate_task_id(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞–¥–∞–Ω–∏—è"""
    return f"{user_id}_{int(datetime.now().timestamp())}"
