# –ó–∞–º–æ—Ä–æ–∑–∫–∞ —Ç—Ä–∏–∫—Å–∏–∫–æ–≤
    frozen_tasks[task_id] = {
        'executor_id': user_id,
        'task': task,
        'frozen_at': datetime.now(BUDAPEST_TZ),
        'unfreezes_at': datetime.now(BUDAPEST_TZ) + timedelta(hours=3)
    }
    
    # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    if user_id in users_db:
        users_db[user_id]['last_interaction'][task['creator_id']] = datetime.now(BUDAPEST_TZ)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
    creator_id = task['creator_id']
    executor = users_db.get(user_id, {})
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{task_id}"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{task_id}")]
    ]
    
    try:
        await context.bot.send_message(
            chat_id=creator_id,
            text=(
                f"üîî –ó–ê–î–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–û\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{executor.get('username', 'unknown')}\n"
                f"–¢–∏–ø: {task['type'].upper()}\n"
                f"–ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ü™É\n\n"
                f"‚è∞ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤\n"
                f"–ò–Ω–∞—á–µ —Ç—Ä–∏–∫—Å–∏–∫–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            ),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"Error notifying creator: {e}")
    
    await query.edit_message_text(
        "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!\n\n"
        "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è (–¥–æ 3 —á–∞—Å–æ–≤)\n"
        "–¢—Ä–∏–∫—Å–∏–∫–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è.",
        reply_markup=get_user_keyboard()
    )
    
    # –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
    context.job_queue.run_once(
        auto_confirm_task,
        when=10800,
        data={'task_id': task_id}
    )


async def confirm_task_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
    
    task_id = query.data.split('_')[1]
    frozen = frozen_tasks.get(task_id)
    
    if not frozen:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
        return
    
    executor_id = frozen['executor_id']
    task = frozen['task']
    reward = task['reward']
    
    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä–∏–∫—Å–∏–∫–æ–≤
    if executor_id in users_db:
        executor = users_db[executor_id]
        executor['trixiki'] = min(executor['trixiki'] + reward, executor['max_limit'])
        executor['stats']['total_earned'] += reward
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if task['type'] == 'like':
            executor['stats']['likes_given'] += 1
            users_db[task['creator_id']]['stats']['likes_received'] += 1
        elif 'comment' in task['type']:
            executor['stats']['comments_given'] += 1
            users_db[task['creator_id']]['stats']['comments_received'] += 1
        elif task['type'] == 'follow':
            executor['stats']['follows_given'] += 1
            users_db[task['creator_id']]['stats']['follows_received'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        await check_achievements(executor_id, context)
        
        try:
            await context.bot.send_message(
                chat_id=executor_id,
                text=f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n+{reward} ü™É\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {executor['trixiki']}/{executor['max_limit']}"
            )
        except Exception as e:
            logger.error(f"Error: {e}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    tasks_db[:] = [t for t in tasks_db if t['id'] != task_id]
    del frozen_tasks[task_id]
    
    await query.edit_message_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏ —Ç—Ä–∏–∫—Å–∏–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã!")


async def reject_task_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    
    task_id = query.data.split('_')[1]
    frozen = frozen_tasks.get(task_id)
    
    if not frozen:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
        return
    
    executor = users_db.get(frozen['executor_id'], {})
    creator = users_db.get(frozen['task']['creator_id'], {})
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
    try:
        await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=(
                f"‚ö†Ô∏è –°–ü–û–†–ù–û–ï –ó–ê–î–ê–ù–ò–ï\n\n"
                f"–°–æ–∑–¥–∞—Ç–µ–ª—å: @{creator.get('username', 'unknown')}\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{executor.get('username', 'unknown')}\n"
                f"–¢–∏–ø: {frozen['task']['type']}\n"
                f"–°—Å—ã–ª–∫–∞: {frozen['task']['link']}\n\n"
                f"–°–æ–∑–¥–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."
            )
        )
    except Exception as e:
        logger.error(f"Error: {e}")
    
    del frozen_tasks[task_id]
    await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º.")


async def auto_confirm_task(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞"""
    task_id = context.job.data['task_id']
    
    if task_id not in frozen_tasks:
        return
    
    frozen = frozen_tasks[task_id]
    executor_id = frozen['executor_id']
    reward = frozen['task']['reward']
    
    if executor_id in users_db:
        executor = users_db[executor_id]
        executor['trixiki'] = min(executor['trixiki'] + reward, executor['max_limit'])
        executor['stats']['total_earned'] += reward
        
        try:
            await context.bot.send_message(
                chat_id=executor_id,
                text=f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n+{reward} ü™É"
            )
        except Exception as e:
            logger.error(f"Error: {e}")
    
    tasks_db[:] = [t for t in tasks_db if t['id'] != task_id]
    del frozen_tasks[task_id]


async def check_achievements(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    user = users_db.get(user_id)
    if not user:
        return
    
    stats = user['stats']
    achievements = user['achievements']
    new_achievements = []
    
    # –õ–∞–π–∫–∏
    for milestone in [100, 200, 300, 500, 1000]:
        ach_name = f"likes_{milestone}"
        if stats['likes_given'] >= milestone and ach_name not in achievements:
            achievements.append(ach_name)
            new_achievements.append(f"üèÜ {milestone} –ª–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!")
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    for milestone in [50, 100, 200, 500]:
        ach_name = f"comments_{milestone}"
        if stats['comments_given'] >= milestone and ach_name not in achievements:
            achievements.append(ach_name)
            new_achievements.append(f"üèÜ {milestone} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞–ø–∏—Å–∞–Ω–æ!")
    
    # –ü–æ–¥–ø–∏—Å–∫–∏
    for milestone in [20, 50, 100, 200]:
        ach_name = f"follows_{milestone}"
        if stats['follows_given'] >= milestone and ach_name not in achievements:
            achievements.append(ach_name)
            new_achievements.append(f"üèÜ {milestone} –ø–æ–¥–ø–∏—Å–æ–∫ —Å–¥–µ–ª–∞–Ω–æ!")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if new_achievements:
        achievement_text = "\n".join(new_achievements)
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üéâ –ù–û–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø!\n\n{achievement_text}"
            )
            
            await context.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=f"üèÜ @{user['username']} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n{achievement_text}"
            )
        except Exception as e:
            logger.error(f"Error: {e}")


# ============== CALLBACK HANDLER ==============

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "profile":
        await show_profile(query, context)
    elif data == "trixiki":
        await show_trixiki(query, context)
    elif data == "pool":
        await show_pool_callback(query, context)
    elif data == "actions":
        await create_task_start(update, context)
    elif data == "quest_done":
        await complete_quest(query, context)
    elif data.startswith("task_"):
        await handle_task_creation(update, context)
    elif data.startswith("dotask_"):
        await do_task_callback(update, context)
    elif data.startswith("done_"):
        await task_done_callback(update, context)
    elif data.startswith("confirm_"):
        await confirm_task_callback(update, context)
    elif data.startswith("reject_"):
        await reject_task_callback(update, context)
    elif data == "back_main":
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_user_keyboard()
        )
    elif data == "subscribe_check":
        await check_subscription(query, context)
    elif data == "anons_on":
        await toggle_announcements(query, context, True)
    elif data == "anons_off":
        await toggle_announcements(query, context, False)


async def show_profile(query, context):
    user_id = query.from_user.id
    
    if user_id not in users_db:
        await query.edit_message_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    user = users_db[user_id]
    stats = user['stats']
    
    profile_text = (
        f"üåÄ –ü–†–û–§–ò–õ–¨\n\n"
        f"üÜî –ù–æ–º–µ—Ä: {user['number']}\n"
        f"üë§ {user['gender']} | {user['age']} –ª–µ—Ç\n"
        f"üì∏ Instagram: {user['instagram']}\n"
        f"üßµ Threads: {user['threads']}\n\n"
        f"ü™É –¢—Ä–∏–∫—Å–∏–∫–∏: {user['trixiki']}/{user['max_limit']}\n"
        f"üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earned']}\n\n"
        f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {stats['likes_given']}/{stats['likes_received']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['comments_given']}/{stats['comments_received']}\n"
        f"üë• –ü–æ–¥–ø–∏—Å–æ–∫: {stats['follows_given']}/{stats['follows_received']}\n\n"
        f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user['achievements'])}"
    )
    
    keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_main")]]
    
    if not user.get('subscribed'):
        keyboard.insert(0, [InlineKeyboardButton(
            "‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –¥–æ 20",
            callback_data="subscribe_check"
        )])
    
    await query.edit_message_text(profile_text, reply_markup=InlineKeyboardMarkup(keyboard))


async def show_trixiki(query, context):
    user_id = query.from_user.id
    
    if user_id not in users_db:
        await query.edit_message_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    user = users_db[user_id]
    
    await query.edit_message_text(
        f"ü™É –í–ê–® –ë–ê–õ–ê–ù–°\n\n"
        f"–¢–µ–∫—É—â–∏–π: {user['trixiki']} ü™É\n"
        f"–ú–∞–∫—Å–∏–º—É–º: {user['max_limit']} ü™É\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π /daily –¥–ª—è –±–æ–Ω—É—Å–∞\n"
        f"‚ú® –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞",
        reply_markup=get_user_keyboard()
    )


async def show_pool_callback(query, context):
    user_id = query.from_user.id
    
    if not tasks_db:
        await query.edit_message_text(
            "üßä –ü—É–ª –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç!",
            reply_markup=get_user_keyboard()
        )
        return
    
    available_tasks = [t for t in tasks_db if t['creator_id'] != user_id][:5]
    
    if not available_tasks:
        await query.edit_message_text(
            "üßä –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
            reply_markup=get_user_keyboard()
        )
        return
    
    text = "üßä –î–û–°–¢–£–ü–ù–´–ï –ó–ê–î–ê–ù–ò–Ø:\n\n"
    buttons = []
    
    for idx, task in enumerate(available_tasks, 1):
        creator = users_db.get(task['creator_id'], {})
        text += f"{idx}. {task['type'].upper()} | {task['reward']} ü™É\n"
        buttons.append([InlineKeyboardButton(
            f"‚úÖ #{idx}",
            callback_data=f"dotask_{task['id']}"
        )])
    
    buttons.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_main")])
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))


async def complete_quest(query, context):
    user_id = query.from_user.id
    
    if user_id not in users_db:
        return
    
    user = users_db[user_id]
    reward = user['max_limit']
    user['trixiki'] = min(user['trixiki'] + reward, user['max_limit'])
    
    await query.edit_message_text(
        f"‚úÖ –ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
        f"+{reward} ü™É\n\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['trixiki']}/{user['max_limit']}"
    )


async def check_subscription(query, context):
    user_id = query.from_user.id
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="sub_confirm")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="profile")]
    ]
    
    await query.edit_message_text(
        f"üì¢ –î–õ–Ø –£–í–ï–õ–ò–ß–ï–ù–ò–Ø –õ–ò–ú–ò–¢–ê\n\n"
        f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞:\n"
        f"üì∏ Instagram: {INSTAGRAM_ACCOUNT}\n"
        f"üßµ Threads: {THREADS_ACCOUNT}\n\n"
        f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def toggle_announcements(query, context, enable: bool):
    user_id = query.from_user.id
    
    if enable:
        if user_id not in announcement_subscribers:
            announcement_subscribers.append(user_id)
        msg = "‚úÖ –ê–Ω–æ–Ω—Å—ã –≤–∫–ª—é—á–µ–Ω—ã!"
    else:
        if user_id in announcement_subscribers:
            announcement_subscribers.remove(user_id)
        msg = "‚ùå –ê–Ω–æ–Ω—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã"
    
    await query.answer(msg)


# ============== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ ==============

async def addusdt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await update.message.reply_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    await update.message.reply_text(
        "üîê USDT TRC-20\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à USDT TRC-20 –∞–¥—Ä–µ—Å:\n"
        "(–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å T...)"
    )
    
    context.user_data['adding_usdt'] = True


async def donate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéØ –¶–µ–ª—å", callback_data="donate_goal")],
        [InlineKeyboardButton("üë• –î–æ–Ω–∞—Ç–æ—Ä—ã", callback_data="donate_donors")],
        [InlineKeyboardButton("üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="donate_details")],
        [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç—ã", callback_data="donate_reports")]
    ]
    
    await update.message.reply_text(
        "üí≥ –î–û–ù–ê–¢–´\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        target_id = update.effective_user.id
    else:
        username = context.args[0].replace('@', '')
        target_id = None
        for uid, udata in users_db.items():
            if udata.get('username') == username:
                target_id = uid
                break
        
        if not target_id:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    
    if target_id not in users_db:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = users_db[target_id]
    stats = user['stats']
    
    text = (
        f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê @{user.get('username', 'unknown')}\n\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {stats['likes_given']} –æ—Ç–¥–∞–Ω–æ / {stats['likes_received']} –ø–æ–ª—É—á–µ–Ω–æ\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['comments_given']} / {stats['comments_received']}\n"
        f"üë• –ü–æ–¥–ø–∏—Å–æ–∫: {stats['follows_given']} / {stats['follows_received']}\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earned']} ü™É\n\n"
        f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user['achievements'])}\n"
        f"ü™É –õ–∏–º–∏—Ç: {user['max_limit']}"
    )
    
    await update.message.reply_text(text)


async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫–∏", callback_data="top_likes")],
        [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="top_comments")],
        [InlineKeyboardButton("üë• –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="top_follows")],
        [InlineKeyboardButton("ü™É –õ–∏–º–∏—Ç", callback_data="top_limit")]
    ]
    
    await update.message.reply_text(
        "üèÜ –†–ï–ô–¢–ò–ù–ì\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check @username –ø—Ä–∏—á–∏–Ω–∞\n\n"
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å 1 –∂–∞–ª–æ–±—É –≤ —á–∞—Å"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    last_report = user_reports.get(user_id)
    if last_report:
        time_passed = (datetime.now(BUDAPEST_TZ) - last_report).total_seconds()
        if time_passed < 3600:
            minutes_left = int((3600 - time_passed) / 60)
            await update.message.reply_text(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –∂–∞–ª–æ–±–∞ —á–µ—Ä–µ–∑ {minutes_left} –º–∏–Ω—É—Ç")
            return
    
    username = context.args[0].replace('@', '')
    reason = ' '.join(context.args[1:])
    reporter = update.effective_user
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=(
                f"‚ö†Ô∏è –ñ–ê–õ–û–ë–ê\n\n"
                f"–û—Ç: @{reporter.username}\n"
                f"–ù–∞: @{username}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        )
        
        user_reports[user_id] = datetime.now(BUDAPEST_TZ)
        await update.message.reply_text("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")


async def randompool_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await update.message.reply_text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    available = [t for t in tasks_db if t['creator_id'] != user_id]
    
    if not available:
        await update.message.reply_text("üßä –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
        return
    
    task = random.choice(available)
    creator = users_db.get(task['creator_id'], {})
    
    text = (
        f"üé≤ –°–õ–£–ß–ê–ô–ù–û–ï –ó–ê–î–ê–ù–ò–ï\n\n"
        f"–¢–∏–ø: {task['type'].upper()}\n"
        f"–û—Ç: @{creator.get('username', 'unknown')}\n"
        f"–°—Å—ã–ª–∫–∞: {task['link']}\n"
    )
    
    if 'comment' in task:
        text += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{task['comment']}\n"
    
    text += f"\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ü™É"
    
    keyboard = [[InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"dotask_{task['id']}")]]
    
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def onanons_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in announcement_subscribers:
        announcement_subscribers.append(user_id)
    
    await update.message.reply_text("‚úÖ –ê–Ω–æ–Ω—Å—ã –≤–∫–ª—é—á–µ–Ω—ã!\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö")


async def offanons_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id in announcement_subscribers:
        announcement_subscribers.remove(user_id)
    
    await update.message.reply_text("‚ùå –ê–Ω–æ–Ω—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ –°–ü–†–ê–í–ö–ê TRIXIKI BOT\n\n"
        "üéØ –û–°–ù–û–í–ù–´–ï:\n"
        "/start - –ù–∞—á–∞–ª–æ\n"
        "/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/daily - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å\n"
        "/profile - –ü—Ä–æ—Ñ–∏–ª—å\n"
        "/trixiki - –ë–∞–ª–∞–Ω—Å\n"
        "/pool - –ó–∞–¥–∞–Ω–∏—è\n"
        "/randompool - –°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n"
        "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        "/stats [@user] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/top - –†–µ–π—Ç–∏–Ω–≥\n\n"
        "üí∞ –¶–ï–ù–´:\n"
        "‚ù§Ô∏è Like - 3 ü™É (–º–∞–∫—Å 3/–¥–µ–Ω—å)\n"
        "üí¨ Comment - 4 ü™É (–º–∞–∫—Å 2/–¥–µ–Ω—å)\n"
        "üí¨ Special - 10 ü™É\n"
        "üë• Follow - 5 ü™É\n\n"
        "üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:\n"
        "/addusdt - –î–æ–±–∞–≤–∏—Ç—å USDT –∞–¥—Ä–µ—Å\n"
        "/donate - –î–æ–Ω–∞—Ç—ã\n"
        "/check @user - –ñ–∞–ª–æ–±–∞ (1/—á–∞—Å)\n"
        "/onanons - –í–∫–ª—é—á–∏—Ç—å –∞–Ω–æ–Ω—Å—ã\n"
        "/offanons - –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–æ–Ω—Å—ã\n\n"
        "‚ö†Ô∏è –ü–†–ê–í–ò–õ–ê:\n"
        "‚Ä¢ –ù–µ —É–¥–∞–ª—è—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ = –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç\n"
        "‚Ä¢ –§–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è\n"
        "‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑ –≤ 8 —á–∞—Å–æ–≤\n\n"
        f"üí¨ –ß–∞—Ç: https://t.me/c/{str(USER_CHAT_ID)[4:]}/1"
    )
    
    await update.message.reply_text(help_text)


# ============== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ==============

async def admin_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /limit @username 1-50")
        return
    
    username = context.args[0].replace('@', '')
    try:
        new_limit = int(context.args[1])
        if new_limit < 1 or new_limit > 50:
            await update.message.reply_text("–õ–∏–º–∏—Ç: 1-50")
            return
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['max_limit'] = new_limit
            await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç @{username}: {new_limit}")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéâ –í–∞—à –ª–∏–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_limit} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤!"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /balance @username")
        return
    
    username = context.args[0].replace('@', '')
    
    for user_data in users_db.values():
        if user_data.get('username') == username:
            await update.message.reply_text(
                f"üí∞ @{username}:\n{user_data['trixiki']}/{user_data['max_limit']} ü™É"
            )
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_trixikichange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trixikichange @username —á–∏—Å–ª–æ")
        return
    
    username = context.args[0].replace('@', '')
    try:
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['trixiki'] = min(user_data['trixiki'] + amount, user_data['max_limit'])
            await update.message.reply_text(
                f"‚úÖ @{username} +{amount} ü™É\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['trixiki']}"
            )
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +{amount} ü™É!"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_localgirls(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    message = ' '.join(context.args)
    if not message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /localgirls <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    count = 0
    for user_id, user_data in users_db.items():
        if user_data.get('gender') == '–ñ':
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message}"
                )
                count += 1
            except Exception as e:
                logger.error(f"Error: {e}")
    
    await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –¥–µ–≤—É—à–∫–∞–º")


async def admin_localboys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    message = ' '.join(context.args)
    if not message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /localboys <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    count = 0
    for user_id, user_data in users_db.items():
        if user_data.get('gender') == '–ú':
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message}"
                )
                count += 1
            except Exception as e:
                logger.error(f"Error: {e}")
    
    await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–∞—Ä–Ω—è–º")


async def admin_liketimeon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /liketimeon @username")
        return
    
    username = context.args[0].replace('@', '')
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['can_create_tasks'] = True
            await update.message.reply_text(f"‚úÖ @{username} –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚úÖ –í–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è!"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_liketimeoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /liketimeoff @username")
        return
    
    username = context.args[0].replace('@', '')
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['can_create_tasks'] = False
            await update.message.reply_text(f"‚ùå @{username} –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def giftstart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    daily_users = [uid for uid, u in users_db.items() if u.get('daily_claimed')]
    
    if not daily_users:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è")
        return
    
    winners_count = random.randint(1, 3)
    winners = random.sample(daily_users, min(winners_count, len(daily_users)))
    
    result = "üéÅ –ü–û–î–ê–†–ö–ò:\n\n"
    
    for winner_id in winners:
        user = users_db[winner_id]
        user['max_limit'] = min(user['max_limit'] + 1, 50)
        result += f"@{user.get('username', 'unknown')} +1 –ª–∏–º–∏—Ç\n"
        
        try:
            await context.bot.send_message(
                chat_id=winner_id,
                text="üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –ª–∏–º–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ +1!"
            )
        except Exception as e:
            logger.error(f"Error: {e}")
    
    await update.message.reply_text(result)


# ============== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==============

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ USDT –∞–¥—Ä–µ—Å–∞
    if context.user_data.get('adding_usdt'):
        if text.startswith('T') and len(text) == 34:
            users_db[user_id]['usdt_address'] = text
            await update.message.reply_text(
                f"‚úÖ USDT –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n{text}",
                reply_markup=get_user_keyboard()
            )
            context.user_data.clear()
        else:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å USDT TRC-20\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    if 'creating_task' in context.user_data:
        if 'link' in context.user_data['creating_task']:
            await handle_special_comment(update, context)
        else:
            await handle_task_link(update, context)
        return


# ============== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==============

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    reg_handler = ConversationHandler(
        entry_points=[CommandHandler('reg', reg_start)],
        states={
            REG_INSTAGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_instagram)],
            REG_THREADS: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_threads)],
            REG_GENDER: [CallbackQueryHandler(reg_gender, pattern='^gender_')],
            REG_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_age)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    application.add_handler(CommandHandler('start', start))
    application.add_handler(reg_handler)
    application.add_handler(CommandHandler('daily', daily_command))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('pool', pool_command))
    application.add_handler(CommandHandler('stats', stats_command))
    application.add_handler(CommandHandler('top', top_command))
    application.add_handler(CommandHandler('check', check_command))
    application.add_handler(CommandHandler('randompool', randompool_command))
    application.add_handler(CommandHandler('addusdt', addusdt_command))
    application.add_handler(CommandHandler('donate', donate_command))
    application.add_handler(CommandHandler('onanons', onanons_command))
    application.add_handler(CommandHandler('offanons', offanons_command))
    
    # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler('limit', admin_limit))
    application.add_handler(CommandHandler('balance', admin_balance))
    application.add_handler(CommandHandler('trixikichange', admin_trixikichange))
    application.add_handler(CommandHandler('trixikiadd', admin_trixikiadd))
    application.add_handler(CommandHandler('localgirls', admin_localgirls))
    application.add_handler(CommandHandler('localboys', admin_localboys))
    application.add_handler(CommandHandler('liketimeon', admin_liketimeon))
    application.add_handler(CommandHandler('liketimeoff', admin_liketimeoff))
    application.add_handler(CommandHandler('giftstart', giftstart_command))
    
    # Callback –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(CallbackQueryHandler(callback_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –î–∂–æ–±—ã
    job_queue = application.job_queue
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –≤ 20:00 Budapest
    budapest_time = datetime.now(BUDAPEST_TZ).replace(hour=20, minute=0, second=0)
    job_queue.run_daily(reset_daily_tasks, time=budapest_time.time())
    
    # –ê–Ω–æ–Ω—Å—ã –∫–∞–∂–¥—ã–µ 20-60 –º–∏–Ω—É—Ç
    job_queue.run_repeating(
        send_announcements,
        interval=timedelta(minutes=random.randint(20, 60)),
        first=10
    )
    
    logger.info("üöÄ Trixiki Bot –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üìä –ê–¥–º–∏–Ω –≥—Ä—É–ø–ø–∞: {ADMIN_GROUP_ID}")
    logger.info(f"üí¨ –ß–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {USER_CHAT_ID}")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['trixiki'] = min(amount, user_data['max_limit'])
            await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å @{username}: {user_data['trixiki']}")
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user_data['trixiki']} ü™É"
                )
            except Exception as e:
                logger.error(f"Error: {e}")
            return
    
    await update.message.reply_text(f"@{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_trixikiadd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trixikiadd @username —á–∏—Å–ª–æ")
        return
    
    username = context.args[0].replace('@', '')
    try:
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        returnimport os
import logging
import random
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pytz
import re

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8365633345:AAE2VnePSyEiTn0vtEynwd3r5rBOBBuTteE')
ADMIN_GROUP_ID = int(os.environ.get('ADMIN_GROUP_ID', -4843909295))
USER_CHAT_ID = int(os.environ.get('USER_CHAT_ID', -1003088023508))
INSTAGRAM_ACCOUNT = os.environ.get('INSTAGRAM_ACCOUNT', '@budapesttrix')
THREADS_ACCOUNT = os.environ.get('THREADS_ACCOUNT', '@budapesttrix')
BUDAPEST_TZ = pytz.timezone('Europe/Budapest')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(REG_INSTAGRAM, REG_THREADS, REG_GENDER, REG_AGE,
 ADD_USDT, CREATE_TASK_TYPE, CREATE_TASK_LINKS,
 CREATE_TASK_COMMENT, CREATE_SPECIAL_COMMENT,
 ADMIN_TASK_DESC, DONATE_SETUP) = range(11)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users_db: Dict = {}
tasks_db: List = []
frozen_tasks: Dict = {}
admin_tasks: List = []
donations: Dict = {
    'goal': '–†–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
    'amount': '0 USDT',
    'description': '–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ Trixiki Bot!',
    'donors': [],
    'reports': []
}
user_reports: Dict = {}  # user_id: last_report_time
announcement_subscribers: List = []

# –ö–≤–µ—Å—Ç—ã (50 —à—Ç—É–∫)
DAILY_QUESTS = [
    "–ü–æ—Å—Ç–∞–≤—å –ª–∞–π–∫ –Ω–∞ 3 –ø–æ—Å—Ç–∞ –≤ Instagram",
    "–ù–∞–ø–∏—à–∏ 2 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç–∞–º–∏",
    "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ 1 –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç",
    "–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –≤ Instagram",
    "–°–æ—Ö—Ä–∞–Ω–∏ 5 –ø–æ—Å—Ç–æ–≤ –≤ –∑–∞–∫–ª–∞–¥–∫–∏",
    "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏ 10 —Å—Ç–æ—Ä–∏—Å",
    "–û—Ç–º–µ—Ç—å –¥—Ä—É–≥–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
    "–ò—Å–ø–æ–ª—å–∑—É–π 3 —Ö—ç—à—Ç–µ–≥–∞ –≤ –ø–æ—Å—Ç–µ",
    "–û—Ç–≤–µ—Ç—å –Ω–∞ 2 —Å—Ç–æ—Ä–∏—Å",
    "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ 3 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º",
    "–î–æ–±–∞–≤—å –ø–æ—Å—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∏–ª—å—Ç—Ä –≤ —Å—Ç–æ—Ä–∏—Å",
    "–û—Ç–º–µ—Ç—å –ª–æ–∫–∞—Ü–∏—é –≤ –ø–æ—Å—Ç–µ",
    "–°–¥–µ–ª–∞–π —Ä–µ–ø–æ—Å—Ç –≤ —Å—Ç–æ—Ä–∏—Å",
    "–û—Ç–≤–µ—Ç—å –Ω–∞ 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
    "–ò—Å–ø–æ–ª—å–∑—É–π –æ–ø—Ä–æ—Å –≤ —Å—Ç–æ—Ä–∏—Å",
    "–î–æ–±–∞–≤—å –º—É–∑—ã–∫—É –≤ —Å—Ç–æ—Ä–∏—Å",
    "–ü–æ—Å—Ç–∞–≤—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ 5 —Å—Ç–æ—Ä–∏—Å",
    "–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å –≤–æ–ø—Ä–æ—Å–æ–º",
    "–ü–æ–¥–¥–µ—Ä–∂–∏ –º–∞–ª—ã–π –±–∏–∑–Ω–µ—Å",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ç—Ä–µ–Ω–¥",
    "–°–¥–µ–ª–∞–π –±—É–º–µ—Ä–∞–Ω–≥",
    "–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –≤ —Å—Ç–æ—Ä–∏—Å",
    "–û—Ç–º–µ—Ç—å –±—Ä–µ–Ω–¥",
    "–ù–∞–ø–∏—à–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é",
    "–ü–æ–¥–µ–ª–∏—Å—å —Ä–µ—Ü–µ–ø—Ç–æ–º",
    "–°—Ç–∏–∫–µ—Ä —Å –≤–æ–ø—Ä–æ—Å–æ–º",
    "–ö–∞—Ä—É—Å–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç",
    "–î–æ–±–∞–≤—å GIF",
    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —ç–º–æ–¥–∑–∏",
    "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤ —Å—Ç–æ—Ä–∏—Å",
    "–õ–∞–π–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—É",
    "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–∏–∫—Ä–æ–±–ª–æ–≥–µ—Ä–∞",
    "–°–ª–∞–π–¥–µ—Ä —Å—Ç–∏–∫–µ—Ä",
    "–î–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 50+ —Å–ª–æ–≤",
    "–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è –≤ —Å—Ç–æ—Ä–∏—Å",
    "–¢–∞–π–º–µ—Ä –≤ —Ä–∏–ª—Å",
    "–°—É–±—Ç–∏—Ç—Ä—ã –∫ —Ä–∏–ª—Å",
    "–õ–∞–π–∫ —Å—Ç–∞—Ä–æ–º—É –ø–æ—Å—Ç—É (–≥–æ–¥+)",
    "–ü—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π –ø–æ—Å—Ç",
    "–°—Ç–∏–∫–µ—Ä —Å –¥–æ–Ω–∞—Ç–∞–º–∏",
    "–ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø–æ—Å—Ç–µ",
    "–ü–æ–¥–¥–µ—Ä–∂–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    "–¢—Ä–µ–Ω–¥-–∞—É–¥–∏–æ –≤ —Ä–∏–ª—Å",
    "–°–æ–≤–µ—Ç –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
    "–ü–æ–¥–µ–ª–∏—Å—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º",
    "–°—Ç–∏–∫–µ—Ä —Å —Å—Å—ã–ª–∫–æ–π",
    "–ó–∞–∫—É–ª–∏—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
    "–î–æ/–ø–æ—Å–ª–µ –ø–æ—Å—Ç",
    "–ü–æ–¥–¥–µ—Ä–∂–∏ –º–µ—Å—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å"
]

# –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞/–ø–∞—Ç—Ç–µ—Ä–Ω—ã
FORBIDDEN_PATTERNS = [
    r'casino', r'porn', r'xxx', r'sex', r'viagra',
    r'casino', r'—Å—Ç–∞–≤–∫–∏', r'–∫–∞–∑–∏–Ω–æ', r'18\+', r'—Å–µ–∫—Å'
]


def get_user_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton("üßä Pool", callback_data="pool"),
         InlineKeyboardButton("ü™É Trixiki", callback_data="trixiki")],
        [InlineKeyboardButton("‚ù§Ô∏è Like/Comment/Follow", callback_data="actions")],
        [InlineKeyboardButton("üåÄ Profile", callback_data="profile")]
    ]
    return InlineKeyboardMarkup(keyboard)


def generate_user_number(gender: str) -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞"""
    while True:
        if gender.upper() == '–ñ':
            number = random.randrange(1, 10000, 2)
        else:
            number = random.randrange(2, 10000, 2)
        
        if not any(u.get('number') == number for u in users_db.values()):
            return number


def is_content_safe(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    text_lower = text.lower()
    for pattern in FORBIDDEN_PATTERNS:
        if re.search(pattern, text_lower):
            return False
    return True


def can_interact(user1_id: int, user2_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (—Ä–∞–∑ –≤ 8 —á–∞—Å–æ–≤)"""
    user1 = users_db.get(user1_id)
    if not user1:
        return True
    
    last_interaction = user1.get('last_interaction', {}).get(user2_id)
    if not last_interaction:
        return True
    
    time_passed = (datetime.now(BUDAPEST_TZ) - last_interaction).total_seconds()
    return time_passed >= 28800  # 8 —á–∞—Å–æ–≤


async def reset_daily_tasks(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å –≤ 20:00"""
    logger.info(f"Daily reset at {datetime.now(BUDAPEST_TZ)}")
    
    tasks_db.clear()
    for user_id, user_data in users_db.items():
        user_data['daily_claimed'] = False
        user_data['trixiki'] = 0
        user_data['daily_tasks_created'] = {'likes': 0, 'comments': 0, 'follows': 0}
    
    for user_id in users_db.keys():
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üåô –ù–æ–≤—ã–π –¥–µ–Ω—å –Ω–∞—á–∞–ª—Å—è! –¢—Ä–∏–∫—Å–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π /daily –¥–ª—è –±–æ–Ω—É—Å–∞!"
            )
        except Exception as e:
            logger.error(f"Error notifying user {user_id}: {e}")


async def send_announcements(context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å—Å—ã–ª–∫–∞ –∞–Ω–æ–Ω—Å–æ–≤ –∫–∞–∂–¥—ã–µ 20-60 –º–∏–Ω—É—Ç"""
    if not tasks_db or not announcement_subscribers:
        return
    
    recent_tasks = tasks_db[-5:]
    
    text = "üì¢ –ù–û–í–´–ï –ó–ê–î–ê–ù–ò–Ø:\n\n"
    for idx, task in enumerate(recent_tasks, 1):
        creator = users_db.get(task['creator_id'], {})
        text += f"{idx}. {task['type'].upper()} | {task['reward']} ü™É\n"
    
    text += "\n–ò—Å–ø–æ–ª—å–∑—É–π /pool –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!"
    
    for user_id in announcement_subscribers:
        try:
            await context.bot.send_message(chat_id=user_id, text=text)
        except Exception as e:
            logger.error(f"Error sending announcement to {user_id}: {e}")


# ============== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ==============

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id in users_db:
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {update.effective_user.first_name}! üéâ",
            reply_markup=get_user_keyboard()
        )
    else:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trixiki Bot!\n\n"
            "üéØ –û–±–º–µ–Ω–∏–≤–∞–π—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤ Instagram/Threads\n"
            "ü™É –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Ç—Ä–∏–∫—Å–∏–∫–∏\n"
            "üèÜ –ü–æ–ª—É—á–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /reg –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!"
        )


async def reg_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id in users_db:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! ‚úÖ")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø\n\n"
        "–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Instagram –∞–∫–∫–∞—É–Ω—Ç\n"
        "–§–æ—Ä–º–∞—Ç: @username"
    )
    return REG_INSTAGRAM


async def reg_instagram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    instagram = update.message.text.strip()
    if not instagram.startswith('@'):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: @username\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return REG_INSTAGRAM
    
    context.user_data['instagram'] = instagram
    await update.message.reply_text(
        "–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Threads –∞–∫–∫–∞—É–Ω—Ç\n"
        "–§–æ—Ä–º–∞—Ç: @username"
    )
    return REG_THREADS


async def reg_threads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    threads = update.message.text.strip()
    if not threads.startswith('@'):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: @username\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return REG_THREADS
    
    context.user_data['threads'] = threads
    
    keyboard = [
        [InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_m"),
         InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_f")]
    ]
    await update.message.reply_text(
        "–®–∞–≥ 3/4: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return REG_GENDER


async def reg_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    gender = '–ú' if query.data == 'gender_m' else '–ñ'
    context.user_data['gender'] = gender
    
    await query.edit_message_text(
        "–®–∞–≥ 4/4: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç\n"
        "–§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ (13-100)"
    )
    return REG_AGE


async def reg_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text.strip())
        if age < 13 or age > 100:
            await update.message.reply_text("‚ùå –í–æ–∑—Ä–∞—Å—Ç: 13-100\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return REG_AGE
        
        user_id = update.effective_user.id
        user_number = generate_user_number(context.user_data['gender'])
        
        users_db[user_id] = {
            'number': user_number,
            'username': update.effective_user.username,
            'instagram': context.user_data['instagram'],
            'threads': context.user_data['threads'],
            'gender': context.user_data['gender'],
            'age': age,
            'trixiki': 15,
            'max_limit': 15,
            'daily_claimed': False,
            'usdt_address': None,
            'subscribed': False,
            'banned': False,
            'can_create_tasks': True,
            'daily_tasks_created': {'likes': 0, 'comments': 0, 'follows': 0},
            'stats': {
                'likes_given': 0,
                'likes_received': 0,
                'comments_given': 0,
                'comments_received': 0,
                'follows_given': 0,
                'follows_received': 0,
                'total_earned': 0
            },
            'achievements': [],
            'created_at': datetime.now(BUDAPEST_TZ).isoformat(),
            'last_interaction': {}
        }
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üÜî –ù–æ–º–µ—Ä: {user_number}\n"
            f"üë§ {context.user_data['gender']} | {age} –ª–µ—Ç\n"
            f"üì∏ Instagram: {context.user_data['instagram']}\n"
            f"üßµ Threads: {context.user_data['threads']}\n"
            f"ü™É –ë–∞–ª–∞–Ω—Å: 15 —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n\n"
            f"üí° –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {INSTAGRAM_ACCOUNT} –∏ {THREADS_ACCOUNT}\n"
            f"—á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç –¥–æ 20 —Ç—Ä–∏–∫—Å–∏–∫–æ–≤!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /daily –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞!",
            reply_markup=get_user_keyboard()
        )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–≤–æ–∑—Ä–∞—Å—Ç):")
        return REG_AGE


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_user_keyboard())
    context.user_data.clear()
    return ConversationHandler.END


# ============== –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ë–û–ù–£–°–´ ==============

async def daily_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    user = users_db[user_id]
    
    if user['daily_claimed']:
        await update.message.reply_text("‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!\n–°–ª–µ–¥—É—é—â–∏–π –≤ 00:00 –ø–æ –ë—É–¥–∞–ø–µ—à—Ç—É")
        return
    
    base_bonus = random.randint(3, 9)
    quest = random.choice(DAILY_QUESTS)
    quest_reward = user['max_limit']
    
    keyboard = [[InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –∫–≤–µ—Å—Ç", callback_data="quest_done")]]
    
    await update.message.reply_text(
        f"üéÅ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–°\n\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ: +{base_bonus} ü™É\n\n"
        f"üìã –ö–≤–µ—Å—Ç –¥–Ω—è:\n{quest}\n\n"
        f"üéØ –ù–∞–≥—Ä–∞–¥–∞: {quest_reward} ü™É\n\n"
        f"–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–≤–µ—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    user['trixiki'] = min(user['trixiki'] + base_bonus, user['max_limit'])
    user['daily_claimed'] = True


# ============== –°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ù–ò–ô ==============

async def create_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = users_db.get(user_id)
    
    if not user or not user.get('can_create_tasks'):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–¥–∞–Ω–∏–π")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚ù§Ô∏è Like (3ü™É)", callback_data="task_like"),
         InlineKeyboardButton("üí¨ Comment (4ü™É)", callback_data="task_comment")],
        [InlineKeyboardButton("üí¨ Special (10ü™É)", callback_data="task_special"),
         InlineKeyboardButton("üë• Follow (5ü™É)", callback_data="task_follow")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    
    await query.edit_message_text(
        f"‚ù§Ô∏è –°–û–ó–î–ê–¢–¨ –ó–ê–î–ê–ù–ò–ï\n\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['trixiki']}/{user['max_limit']} ü™É\n\n"
        f"–°–µ–≥–æ–¥–Ω—è —Å–æ–∑–¥–∞–Ω–æ:\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {user['daily_tasks_created']['likes']}/3\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {user['daily_tasks_created']['comments']}/2\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_task_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = users_db[user_id]
    task_type = query.data.split('_')[1]
    
    costs = {'like': 3, 'comment': 4, 'special': 10, 'follow': 5}
    limits = {'like': 3, 'comment': 2, 'special': 2, 'follow': 999}
    
    cost = costs[task_type]
    limit_key = 'likes' if task_type == 'like' else 'comments' if task_type in ['comment', 'special'] else 'follows'
    
    if user['trixiki'] < cost:
        await query.edit_message_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–∏–∫—Å–∏–∫–æ–≤!\n"
            f"–ù—É–∂–Ω–æ: {cost} ü™É\n–ï—Å—Ç—å: {user['trixiki']} ü™É",
            reply_markup=get_user_keyboard()
        )
        return
    
    if user['daily_tasks_created'][limit_key] >= limits[task_type]:
        await query.edit_message_text(
            f"‚ùå –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {user['daily_tasks_created'][limit_key]}/{limits[task_type]}",
            reply_markup=get_user_keyboard()
        )
        return
    
    context.user_data['creating_task'] = {
        'type': task_type,
        'cost': cost,
        'limit_key': limit_key
    }
    
    if task_type == 'like':
        await query.edit_message_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç Instagram/Threads\n\n"
            "–§–æ—Ä–º–∞—Ç: https://instagram.com/p/xxx –∏–ª–∏ https://threads.net/..."
        )
    elif task_type == 'comment':
        await query.edit_message_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n\n"
            "–§–æ—Ä–º–∞—Ç: https://instagram.com/p/xxx"
        )
    elif task_type == 'special':
        await query.edit_message_text(
            "üìù –®–∞–≥ 1/2: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç\n\n"
            "–ó–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å"
        )
    else:  # follow
        await query.edit_message_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            "–§–æ—Ä–º–∞—Ç: https://instagram.com/username"
        )


async def handle_task_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if 'creating_task' not in context.user_data:
        return
    
    link = update.message.text.strip()
    
    if not (link.startswith('https://instagram.com') or link.startswith('https://threads.net')):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ Instagram –∏–ª–∏ Threads")
        return
    
    if not is_content_safe(link):
        await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!")
        return
    
    task_data = context.user_data['creating_task']
    user = users_db[user_id]
    
    if task_data['type'] == 'special':
        context.user_data['creating_task']['link'] = link
        await update.message.reply_text(
            "üìù –®–∞–≥ 2/2: –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n\n"
            "–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        )
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    task_id = f"{user_id}_{int(datetime.now().timestamp())}"
    
    task = {
        'id': task_id,
        'creator_id': user_id,
        'type': task_data['type'],
        'link': link,
        'reward': task_data['cost'],
        'created_at': datetime.now(BUDAPEST_TZ).isoformat()
    }
    
    tasks_db.append(task)
    user['trixiki'] -= task_data['cost']
    user['daily_tasks_created'][task_data['limit_key']] += 1
    
    await update.message.reply_text(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"–¢–∏–ø: {task_data['type'].upper()}\n"
        f"–°–ø–∏—Å–∞–Ω–æ: {task_data['cost']} ü™É\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['trixiki']}/{user['max_limit']} ü™É\n\n"
        f"–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø—É–ª!",
        reply_markup=get_user_keyboard()
    )
    
    context.user_data.clear()


async def handle_special_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if 'creating_task' not in context.user_data or 'link' not in context.user_data['creating_task']:
        return
    
    comment = update.message.text.strip()
    
    if not is_content_safe(comment):
        await update.message.reply_text("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!")
        return
    
    if len(comment) > 500:
        await update.message.reply_text("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    task_data = context.user_data['creating_task']
    user = users_db[user_id]
    
    task_id = f"{user_id}_{int(datetime.now().timestamp())}"
    
    task = {
        'id': task_id,
        'creator_id': user_id,
        'type': 'special_comment',
        'link': task_data['link'],
        'comment': comment,
        'reward': task_data['cost'],
        'created_at': datetime.now(BUDAPEST_TZ).isoformat()
    }
    
    tasks_db.append(task)
    user['trixiki'] -= task_data['cost']
    user['daily_tasks_created'][task_data['limit_key']] += 1
    
    await update.message.reply_text(
        f"‚úÖ Special Comment —Å–æ–∑–¥–∞–Ω!\n\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment[:50]}...\n"
        f"–°–ø–∏—Å–∞–Ω–æ: {task_data['cost']} ü™É\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['trixiki']}/{user['max_limit']} ü™É",
        reply_markup=get_user_keyboard()
    )
    
    context.user_data.clear()


# ============== –ü–£–õ –ó–ê–î–ê–ù–ò–ô ==============

async def pool_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    if not tasks_db:
        await update.message.reply_text(
            "üßä –ü—É–ª –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç!\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ‚ù§Ô∏è Like/Comment/Follow",
            reply_markup=get_user_keyboard()
        )
        return
    
    available_tasks = [t for t in tasks_db if t['creator_id'] != user_id][:10]
    
    if not available_tasks:
        await update.message.reply_text(
            "üßä –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤–∞—Å",
            reply_markup=get_user_keyboard()
        )
        return
    
    text = "üßä –î–û–°–¢–£–ü–ù–´–ï –ó–ê–î–ê–ù–ò–Ø:\n\n"
    buttons = []
    
    for idx, task in enumerate(available_tasks, 1):
        creator = users_db.get(task['creator_id'], {})
        text += (
            f"{idx}. {task['type'].upper()}\n"
            f"   –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ü™É\n"
            f"   –û—Ç: @{creator.get('username', 'unknown')}\n\n"
        )
        buttons.append([InlineKeyboardButton(
            f"‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å #{idx}",
            callback_data=f"dotask_{task['id']}"
        )])
    
    buttons.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pool")])
    
    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(buttons)
    )


async def do_task_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    task_id = query.data.split('_')[1]
    
    task = next((t for t in tasks_db if t['id'] == task_id), None)
    
    if not task:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        return
    
    if task['creator_id'] == user_id:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!")
        return
    
    if not can_interact(user_id, task['creator_id']):
        await query.edit_message_text(
            "‚ùå –í—ã –Ω–µ–¥–∞–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n"
            "–ü–æ–¥–æ–∂–¥–∏—Ç–µ 8 —á–∞—Å–æ–≤."
        )
        return
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è
    task_info = f"üìã –ó–ê–î–ê–ù–ò–ï #{task_id}\n\n"
    task_info += f"–¢–∏–ø: {task['type'].upper()}\n"
    task_info += f"–°—Å—ã–ª–∫–∞: {task['link']}\n"
    
    if 'comment' in task:
        task_info += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{task['comment']}\n"
    
    task_info += f"\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ü™É\n\n"
    task_info += "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{task_id}")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –ø—É–ª—É", callback_data="pool")]
    ]
    
    await query.edit_message_text(task_info, reply_markup=InlineKeyboardMarkup(keyboard))


async def task_done_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
    
    user_id = update.effective_user.id
    task_id = query.data.split('_')[1]
    
    task = next((t for t in tasks_db if t['id'] == task_id), None)
    
    if not task:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    # –ó–∞–º–æ—Ä–æ–∑–∫–∞ —Ç—Ä–∏–∫—Å–∏–∫–æ–≤
    frozen_tasks[task_id] = {
