"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Trixiki Bot
–í–∫–ª—é—á–∞–µ—Ç: –ø—É–ª –∑–∞–¥–∞–Ω–∏–π, –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã, —Ä–µ–π–¥—ã, –∫–æ–Ω–∫—É—Ä—Å—ã MyCom
"""

import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from bot import (
    users_db, tasks_db, frozen_tasks, admin_tasks,
    mycom_contest, raid_data, BUDAPEST_TZ, ADMIN_GROUP_ID
)


# ============== –ü–£–õ –ó–ê–î–ê–ù–ò–ô ==============

async def pool_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    if not tasks_db:
        await update.message.reply_text(
            "üßä –ü—É–ª –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç!\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚ù§Ô∏è Like/Comment/Follow"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞–Ω–∏–π
    available_tasks = [t for t in tasks_db if t['creator_id'] != user_id][:10]
    
    if not available_tasks:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤–∞—Å.")
        return
    
    text = "üßä –î–û–°–¢–£–ü–ù–´–ï –ó–ê–î–ê–ù–ò–Ø:\n\n"
    for idx, task in enumerate(available_tasks, 1):
        creator = users_db.get(task['creator_id'], {})
        text += (
            f"{idx}. {task['type'].upper()}\n"
            f"   –û—Ç: @{creator.get('username', 'unknown')}\n"
            f"   –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ü™É\n"
            f"   ID: {task['id']}\n\n"
        )
    
    text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dotask <ID> –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    await update.message.reply_text(text)


async def create_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user = users_db.get(user_id)
    
    if not user:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚ù§Ô∏è Like (3ü™É)", callback_data="create_like"),
         InlineKeyboardButton("üí¨ Comment (4ü™É)", callback_data="create_comment")],
        [InlineKeyboardButton("üí¨ Special Comment (10ü™É)", callback_data="create_special"),
         InlineKeyboardButton("üë• Follow (5ü™É)", callback_data="create_follow")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    
    await query.edit_message_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:\n\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['trixiki']} ü™É",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def do_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /dotask <ID>")
        return
    
    task_id = context.args[0]
    task = next((t for t in tasks_db if t['id'] == task_id), None)
    
    if not task:
        await update.message.reply_text("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    if task['creator_id'] == user_id:
        await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!")
        return
    
    # –ó–∞–º–æ—Ä–æ–∑–∫–∞ —Ç—Ä–∏–∫—Å–∏–∫–æ–≤
    frozen_tasks[task_id] = {
        'executor_id': user_id,
        'task': task,
        'frozen_at': datetime.now(BUDAPEST_TZ),
        'unfreezes_at': datetime.now(BUDAPEST_TZ) + timedelta(hours=3)
    }
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
    creator_id = task['creator_id']
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{task_id}"),
         InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{task_id}")]
    ]
    
    try:
        await context.bot.send_message(
            chat_id=creator_id,
            text=(
                f"üîî –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{users_db[user_id]['username']} "
                f"–≤—ã–ø–æ–ª–Ω–∏–ª –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ: {task['type']}\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤:"
            ),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"Error notifying creator: {e}")
    
    await update.message.reply_text(
        "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è (–¥–æ 3 —á–∞—Å–æ–≤)."
    )
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
    context.job_queue.run_once(
        auto_confirm_task,
        when=10800,  # 3 —á–∞—Å–∞
        data={'task_id': task_id}
    )


async def confirm_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    task_id = query.data.split('_')[1]
    frozen = frozen_tasks.get(task_id)
    
    if not frozen:
        await query.edit_message_text("–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
        return
    
    executor_id = frozen['executor_id']
    task = frozen['task']
    reward = task['reward']
    
    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä–∏–∫—Å–∏–∫–æ–≤
    if executor_id in users_db:
        users_db[executor_id]['trixiki'] = min(
            users_db[executor_id]['trixiki'] + reward,
            users_db[executor_id]['max_limit']
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        task_type = task['type']
        if task_type == 'like':
            users_db[executor_id]['stats']['likes_given'] += 1
            users_db[task['creator_id']]['stats']['likes_received'] += 1
        elif 'comment' in task_type:
            users_db[executor_id]['stats']['comments_given'] += 1
            users_db[task['creator_id']]['stats']['comments_received'] += 1
        elif task_type == 'follow':
            users_db[executor_id]['stats']['follows_given'] += 1
            users_db[task['creator_id']]['stats']['follows_received'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        await check_achievements(executor_id, context)
        
        try:
            await context.bot.send_message(
                chat_id=executor_id,
                text=f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! +{reward} ü™É"
            )
        except Exception as e:
            logger.error(f"Error notifying executor: {e}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    tasks_db[:] = [t for t in tasks_db if t['id'] != task_id]
    del frozen_tasks[task_id]
    
    await query.edit_message_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")


async def reject_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    task_id = query.data.split('_')[1]
    frozen = frozen_tasks.get(task_id)
    
    if not frozen:
        await query.edit_message_text("–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
    executor = users_db.get(frozen['executor_id'], {})
    creator = users_db.get(frozen['task']['creator_id'], {})
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=(
                f"‚ö†Ô∏è –°–ü–û–†–ù–û–ï –ó–ê–î–ê–ù–ò–ï\n\n"
                f"–°–æ–∑–¥–∞—Ç–µ–ª—å: @{creator.get('username', 'unknown')}\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{executor.get('username', 'unknown')}\n"
                f"–¢–∏–ø: {frozen['task']['type']}\n\n"
                f"–°–æ–∑–¥–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."
            )
        )
    except Exception as e:
        logger.error(f"Error sending to admin group: {e}")
    
    del frozen_tasks[task_id]
    await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º.")


async def auto_confirm_task(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞"""
    task_id = context.job.data['task_id']
    
    if task_id in frozen_tasks:
        frozen = frozen_tasks[task_id]
        executor_id = frozen['executor_id']
        reward = frozen['task']['reward']
        
        if executor_id in users_db:
            users_db[executor_id]['trixiki'] = min(
                users_db[executor_id]['trixiki'] + reward,
                users_db[executor_id]['max_limit']
            )
            
            try:
                await context.bot.send_message(
                    chat_id=executor_id,
                    text=f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! +{reward} ü™É"
                )
            except Exception as e:
                logger.error(f"Error notifying executor: {e}")
        
        tasks_db[:] = [t for t in tasks_db if t['id'] != task_id]
        del frozen_tasks[task_id]


async def check_achievements(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = users_db.get(user_id)
    if not user:
        return
    
    stats = user['stats']
    achievements = user['achievements']
    new_achievements = []
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ª–∞–π–∫–∏
    like_milestones = [100, 200, 300, 500, 1000]
    for milestone in like_milestones:
        achievement_name = f"likes_given_{milestone}"
        if stats['likes_given'] >= milestone and achievement_name not in achievements:
            achievements.append(achievement_name)
            new_achievements.append(f"üèÜ {milestone} –ª–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!")
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    comment_milestones = [50, 100, 200, 500]
    for milestone in comment_milestones:
        achievement_name = f"comments_{milestone}"
        if stats['comments_given'] >= milestone and achievement_name not in achievements:
            achievements.append(achievement_name)
            new_achievements.append(f"üèÜ {milestone} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞–ø–∏—Å–∞–Ω–æ!")
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    follow_milestones = [20, 50, 100, 200]
    for milestone in follow_milestones:
        achievement_name = f"follows_{milestone}"
        if stats['follows_given'] >= milestone and achievement_name not in achievements:
            achievements.append(achievement_name)
            new_achievements.append(f"üèÜ {milestone} –ø–æ–¥–ø–∏—Å–æ–∫ —Å–¥–µ–ª–∞–Ω–æ!")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–æ–≤
    if new_achievements:
        achievement_text = "\n".join(new_achievements)
        
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üéâ –ù–û–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø!\n\n{achievement_text}"
            )
            
            await context.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=f"üèÜ @{user['username']} –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n{achievement_text}"
            )
        except Exception as e:
            logger.error(f"Error sending achievement notification: {e}")


# ============== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ==============

async def admin_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç —Ç—Ä–∏–∫—Å–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /limit @username 1-50")
        return
    
    username = context.args[0].replace('@', '')
    try:
        new_limit = int(context.args[1])
        if new_limit < 1 or new_limit > 50:
            await update.message.reply_text("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 50")
            return
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞")
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = None
    for uid, user_data in users_db.items():
        if user_data.get('username') == username:
            user_id = uid
            break
    
    if not user_id:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    users_db[user_id]['max_limit'] = new_limit
    
    await update.message.reply_text(
        f"‚úÖ –õ–∏–º–∏—Ç @{username} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_limit} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤"
    )
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üéâ –í–∞—à –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∏–∫—Å–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_limit}!"
        )
    except Exception as e:
        logger.error(f"Error notifying user: {e}")


async def admin_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /balance @username")
        return
    
    username = context.args[0].replace('@', '')
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            await update.message.reply_text(
                f"üí∞ –ë–∞–ª–∞–Ω—Å @{username}:\n"
                f"ü™É {user_data['trixiki']}/{user_data['max_limit']} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤"
            )
            return
    
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_trixiki_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∏–∫—Å–∏–∫–æ–≤"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trixikichange @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    
    username = context.args[0].replace('@', '')
    try:
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['trixiki'] = min(amount, user_data['max_limit'])
            await update.message.reply_text(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å @{username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {user_data['trixiki']} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤"
            )
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {user_data['trixiki']} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤"
                )
            except Exception as e:
                logger.error(f"Error notifying user: {e}")
            return
    
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_trixiki_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–∫—Å–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /trixikiadd @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    
    username = context.args[0].replace('@', '')
    try:
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return
    
    for user_id, user_data in users_db.items():
        if user_data.get('username') == username:
            user_data['trixiki'] = min(
                user_data['trixiki'] + amount,
                user_data['max_limit']
            )
            await update.message.reply_text(
                f"‚úÖ @{username} –ø–æ–ª—É—á–∏–ª +{amount} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['trixiki']}/{user_data['max_limit']}"
            )
            
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +{amount} —Ç—Ä–∏–∫—Å–∏–∫–æ–≤!"
                )
            except Exception as e:
                logger.error(f"Error notifying user: {e}")
            return
    
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def admin_localgirls(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –¥–µ–≤—É—à–∫–∞–º"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    message = ' '.join(context.args)
    if not message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /localgirls <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    count = 0
    for user_id, user_data in users_db.items():
        if user_data.get('gender') == '–ñ':
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message}"
                )
                count += 1
            except Exception as e:
                logger.error(f"Error sending to {user_id}: {e}")
    
    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –¥–µ–≤—É—à–∫–∞–º")


async def admin_localboys(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–∞—Ä–Ω—è–º"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    message = ' '.join(context.args)
    if not message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /localboys <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    
    count = 0
    for user_id, user_data in users_db.items():
        if user_data.get('gender') == '–ú':
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message}"
                )
                count += 1
            except Exception as e:
                logger.error(f"Error sending to {user_id}: {e}")
    
    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–∞—Ä–Ω—è–º")


# ============== –°–ò–°–¢–ï–ú–ê –†–ï–ô–î–û–í ==============

async def raid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π–¥–µ"""
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    status = raid_data['status']
    
    if status == 'inactive':
        text = (
            "üî¥ Raid - not active\n\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –∫–æ–≥–¥–∞ —Ä–µ–π–¥ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lastraid –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        )
    elif status == 'processing':
        start_time = raid_data.get('start_time')
        if start_time:
            time_left = (start_time - datetime.now(BUDAPEST_TZ)).total_seconds() / 60
            text = (
                f"üü° Raid - processing\n\n"
                f"‚è∞ –î–æ –Ω–∞—á–∞–ª–∞ —Ä–µ–π–¥–∞: {int(time_left)} –º–∏–Ω—É—Ç\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞."
            )
        else:
            text = "üü° Raid - processing\n\n–û–∂–∏–¥–∞–π—Ç–µ –∞–Ω–æ–Ω—Å–∞..."
    else:  # active
        text = (
            f"üü¢ Raid - active\n\n"
            f"üìã {raid_data['description']}\n\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(raid_data['participants'])}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /joinraid –¥–ª—è —É—á–∞—Å—Ç–∏—è!"
        )
    
    await update.message.reply_text(text)


async def raid_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–µ–π–¥—É"""
    user_id = update.effective_user.id
    
    if user_id not in users_db:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /reg")
        return
    
    if raid_data['status'] != 'active':
        await update.message.reply_text("‚ùå –†–µ–π–¥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!")
        return
    
    if user_id in raid_data['participants']:
        await update.message.reply_text("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–µ–π–¥–µ!")
        return
    
    raid_data['participants'].append(user_id)
    
    await update.message.reply_text(
        f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ä–µ–π–¥—É!\n\n"
        f"üìã –ó–∞–¥–∞–Ω–∏–µ:\n{raid_data['description']}\n\n"
        f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(raid_data['participants'])}"
    )


async def raid_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–µ–π–¥–∞"""
    male_count = sum(1 for uid in raid_data['participants'] 
                     if users_db.get(uid, {}).get('gender') == '–ú')
    female_count = sum(1 for uid in raid_data['participants'] 
                       if users_db.get(uid, {}).get('gender') == '–ñ')
    total = len(raid_data['participants'])
    
    await update.message.reply_text(
        f"üë• –£–ß–ê–°–¢–ù–ò–ö–ò –†–ï–ô–î–ê:\n\n"
        f"üë® –ü–∞—Ä–Ω–∏: {male_count}\n"
        f"üë© –î–µ–≤—É—à–∫–∏: {female_count}\n"
        f"üìä –í—Å–µ–≥–æ: {total}"
    )


async def admin_raid_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–π–¥ (–∞–¥–º–∏–Ω)"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    delay_minutes = random.randint(33, 99)
    start_time = datetime.now(BUDAPEST_TZ) + timedelta(minutes=delay_minutes)
    
    raid_data['status'] = 'processing'
    raid_data['start_time'] = start_time
    raid_data['participants'] = []
    
    await update.message.reply_text(
        f"üü° –†–µ–π–¥ –∑–∞–ø—É—â–µ–Ω!\n\n"
        f"‚è∞ –ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑ {delay_minutes} –º–∏–Ω—É—Ç\n"
        f"üïê –°—Ç–∞—Ä—Ç –≤ {start_time.strftime('%H:%M')}"
    )
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é
    context.job_queue.run_once(
        activate_raid,
        when=delay_minutes * 60,
        data={}
    )


async def activate_raid(context: ContextTypes.DEFAULT_TYPE):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–π–¥–∞"""
    raid_data['status'] = 'active'
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in users_db.keys():
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=(
                    f"üü¢ –†–ï–ô–î –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!\n\n"
                    f"üìã {raid_data['description']}\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /joinraid –¥–ª—è —É—á–∞—Å—Ç–∏—è!"
                )
            )
        except Exception as e:
            logger.error(f"Error notifying user {user_id}: {e}")


async def admin_raid_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–π–¥–∞"""
    if update.effective_chat.id != ADMIN_GROUP_ID:
        return
    
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /raidtime <–º–∏–Ω—É—Ç—ã>")
        return
    
    try:
        duration = int(context.args[0])
        raid_data['duration'] = duration
        
        await update.message.reply_text(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–π–¥–∞: {duration} –º–∏–Ω—É—Ç")
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ
        context.job_queue.run_once(
            end_raid,
            when=duration * 60,
            data={}
        )
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")


async def end_raid(context: ContextTypes.DEFAULT_TYPE):
    """–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–µ–π–¥–∞"""
    participants = raid_data['participants']
    
    # –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–ú –∏ –ñ)
    males = [uid for uid in participants if users_db.get(uid, {}).get('gender') == '–ú']
    females = [uid for uid in participants if users_db.get(uid, {}).get('gender') == '–ñ']
    
    winners = {}
    if males:
        winners['male'] = random.choice(males)
    if females:
        winners['female'] = random.choice(females)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for user_id in participants:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üèÅ –†–µ–π–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
            )
        except Exception as e:
            logger.error(f"Error notifying participant {user_id}: {e}")
    
    # –°–±—Ä–æ—Å
    raid_data['status'] = 'inactive'
    raid_data['participants'] = []
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
    result_text = "üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ï–ô–î–ê:\n\n"
    for gender_key, winner_id in winners.items():
        winner = users_db.get(winner_id, {})
        result_text += f"{'üë®' if gender_key == 'male' else 'üë©'} @{winner.get('username', 'unknown')}\n"
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=result_text
        )
    except Exception as e:
        logger.error(f"Error sending raid results: {e}")


# ============== –¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==============

async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = [
        [InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫–∏", callback_data="top_likes"),
         InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="top_comments")],
        [InlineKeyboardButton("üë• –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="top_follows"),
         InlineKeyboardButton("ü™É –õ–∏–º–∏—Ç", callback_data="top_limit")]
    ]
    
    await update.message.reply_text(
        "üèÜ –†–ï–ô–¢–ò–ù–ì\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    category = query.data.split('_')[1]
    
    if category == 'likes':
        sorted_users = sorted(
            users_db.items(),
            key=lambda x: x[1]['stats']['likes_given'],
            reverse=True
        )[:5]
        title = "‚ù§Ô∏è –¢–û–ü –ü–û –õ–ê–ô–ö–ê–ú"
        stat_key = 'likes_given'
    elif category == 'comments':
        sorted_users = sorted(
            users_db.items(),
            key=lambda x: x[1]['stats']['comments_given'],
            reverse=True
        )[:5]
        title = "üí¨ –¢–û–ü –ü–û –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–ú"
        stat_key = 'comments_given'
    elif category == 'follows':
        sorted_users = sorted(
            users_db.items(),
            key=lambda x: x[1]['stats']['follows_given'],
            reverse=True
        )[:5]
        title = "üë• –¢–û–ü –ü–û –ü–û–î–ü–ò–°–ö–ê–ú"
        stat_key = 'follows_given'
    else:  # limit
        sorted_users = sorted(
            users_db.items(),
            key=lambda x: x[1]['max_limit'],
            reverse=True
        )[:5]
        title = "ü™É –¢–û–ü –ü–û –õ–ò–ú–ò–¢–£"
        stat_key = 'max_limit'
    
    text = f"{title}\n\n"
    for idx, (user_id, user_data) in enumerate(sorted_users, 1):
        value = user_data['stats'].get(stat_key) if stat_key in ['likes_given', 'comments_given', 'follows_given'] else user_data.get(stat_key)
        text += f"{idx}. @{user_data.get('username', 'unknown')} - {value}\n"
    
    await query.edit_message_text(text)


# ============== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ ==============

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if len(context.args) < 1:
        user_id = update.effective_user.id
    else:
        username = context.args[0].replace('@', '')
        user_id = None
        for uid, user_data in users_db.items():
            if user_data.get('username') == username:
                user_id = uid
                break
        
        if not user_id:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    
    if user_id not in users_db:
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = users_db[user_id]
    stats = user['stats']
    
    text = (
        f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê @{user.get('username', 'unknown')}\n\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {stats['likes_given']} / {stats['likes_received']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['comments_given']} / {stats['comments_received']}\n"
        f"üë• –ü–æ–¥–ø–∏—Å–æ–∫: {stats['follows_given']} / {stats['follows_received']}\n\n"
        f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(user['achievements'])}\n"
        f"ü™É –õ–∏–º–∏—Ç: {user['max_limit']}"
    )
    
    await update.message.reply_text(text)


async def check_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check @username <–ø—Ä–∏—á–∏–Ω–∞>")
        return
    
    username = context.args[0].replace('@', '')
    reason = ' '.join(context.args[1:])
    reporter = update.effective_user
    
    try:
        await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=(
                f"‚ö†Ô∏è –ñ–ê–õ–û–ë–ê\n\n"
                f"–û—Ç: @{reporter.username}\n"
                f"–ù–∞: @{username}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        )
        await update.message.reply_text("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    except Exception as e:
        logger.error(f"Error sending complaint: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã")
